{"ast":null,"code":"import { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom7.js';\nimport { extend } from '../../shared/utils.js';\n\nfunction getElMinSize(dimension, $el) {\n  let minSize = $el.css(`min-${dimension}`);\n\n  if (minSize === 'auto' || minSize === 'none') {\n    minSize = 0;\n  } else if (minSize.indexOf('px') >= 0) {\n    minSize = parseFloat(minSize);\n  } else if (minSize.indexOf('%') >= 0) {\n    minSize = $el.parent()[0][dimension === 'height' ? 'offsetHeight' : 'offsetWidth'] * parseFloat(minSize) / 100;\n  }\n\n  return minSize;\n}\n\nfunction getElMaxSize(dimension, $el) {\n  let maxSize = $el.css(`max-${dimension}`);\n\n  if (maxSize === 'auto' || maxSize === 'none') {\n    maxSize = null;\n  } else if (maxSize.indexOf('px') >= 0) {\n    maxSize = parseFloat(maxSize);\n  } else if (maxSize.indexOf('%') >= 0) {\n    maxSize = $el.parent()[0][dimension === 'height' ? 'offsetHeight' : 'offsetWidth'] * parseFloat(maxSize) / 100;\n  }\n\n  return maxSize;\n}\n\nconst Grid = {\n  init() {\n    const app = this;\n    let isTouched;\n    let isMoved;\n    let touchStartX;\n    let touchStartY;\n    let $resizeHandlerEl;\n    let $prevResizableEl;\n    let $nextResizableEl;\n    let prevElSize;\n    let prevElMinSize;\n    let prevElMaxSize;\n    let nextElSize;\n    let nextElMinSize;\n    let nextElMaxSize;\n    let parentSize;\n    let itemsInFlow;\n    let gapSize;\n    let isScrolling;\n\n    function handleTouchStart(e) {\n      if (isTouched || isMoved) return;\n      $resizeHandlerEl = $(e.target).closest('.resize-handler');\n      touchStartX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchStartY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n      isTouched = true;\n      $prevResizableEl = undefined;\n      $nextResizableEl = undefined;\n      isScrolling = undefined;\n    }\n\n    function handleTouchMove(e) {\n      if (!isTouched) return;\n      const isRow = $resizeHandlerEl.parent('.row').length === 1;\n      const sizeProp = isRow ? 'height' : 'width';\n      const getSizeProp = isRow ? 'offsetHeight' : 'offsetWidth';\n\n      if (!isMoved) {\n        $prevResizableEl = $resizeHandlerEl.parent(isRow ? '.row' : '.col');\n\n        if ($prevResizableEl.length && (!$prevResizableEl.hasClass('resizable') || $prevResizableEl.hasClass('resizable-fixed'))) {\n          $prevResizableEl = $prevResizableEl.prevAll('.resizable:not(.resizable-fixed)').eq(0);\n        }\n\n        $nextResizableEl = $prevResizableEl.next(isRow ? '.row' : '.col');\n\n        if ($nextResizableEl.length && (!$nextResizableEl.hasClass('resizable') || $nextResizableEl.hasClass('resizable-fixed'))) {\n          $nextResizableEl = $nextResizableEl.nextAll('.resizable:not(.resizable-fixed)').eq(0);\n        }\n\n        if ($prevResizableEl.length) {\n          prevElSize = $prevResizableEl[0][getSizeProp];\n          prevElMinSize = getElMinSize(sizeProp, $prevResizableEl);\n          prevElMaxSize = getElMaxSize(sizeProp, $prevResizableEl);\n          parentSize = $prevResizableEl.parent()[0][getSizeProp];\n          itemsInFlow = $prevResizableEl.parent().children(isRow ? '.row' : '[class*=\"col-\"], .col').length;\n          gapSize = parseFloat($prevResizableEl.css(isRow ? '--f7-grid-row-gap' : '--f7-grid-gap'));\n        }\n\n        if ($nextResizableEl.length) {\n          nextElSize = $nextResizableEl[0][getSizeProp];\n          nextElMinSize = getElMinSize(sizeProp, $nextResizableEl);\n          nextElMaxSize = getElMaxSize(sizeProp, $nextResizableEl);\n\n          if (!$prevResizableEl.length) {\n            parentSize = $nextResizableEl.parent()[0][getSizeProp];\n            itemsInFlow = $nextResizableEl.parent().children(isRow ? '.row' : '[class*=\"col-\"], .col').length;\n            gapSize = parseFloat($nextResizableEl.css(isRow ? '--f7-grid-row-gap' : '--f7-grid-gap'));\n          }\n        }\n      }\n\n      isMoved = true;\n      const touchCurrentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n      const touchCurrentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n      if (typeof isScrolling === 'undefined' && !isRow) {\n        isScrolling = !!(isScrolling || Math.abs(touchCurrentY - touchStartY) > Math.abs(touchCurrentX - touchStartX));\n      }\n\n      if (isScrolling) {\n        isTouched = false;\n        isMoved = false;\n        return;\n      }\n\n      const isAbsolute = $prevResizableEl.hasClass('resizable-absolute') || $nextResizableEl.hasClass('resizable-absolute');\n      const resizeNextEl = !isRow || isRow && !isAbsolute;\n\n      if (resizeNextEl && !$nextResizableEl.length || !$prevResizableEl.length) {\n        isTouched = false;\n        isMoved = false;\n        return;\n      }\n\n      e.preventDefault();\n      let diff = isRow ? touchCurrentY - touchStartY : touchCurrentX - touchStartX;\n      let prevElNewSize;\n      let nextElNewSize;\n\n      if ($prevResizableEl.length) {\n        prevElNewSize = prevElSize + diff;\n\n        if (prevElNewSize < prevElMinSize) {\n          prevElNewSize = prevElMinSize;\n          diff = prevElNewSize - prevElSize;\n        }\n\n        if (prevElMaxSize && prevElNewSize > prevElMaxSize) {\n          prevElNewSize = prevElMaxSize;\n          diff = prevElNewSize - prevElSize;\n        }\n      }\n\n      if ($nextResizableEl.length && resizeNextEl) {\n        nextElNewSize = nextElSize - diff;\n\n        if (nextElNewSize < nextElMinSize) {\n          nextElNewSize = nextElMinSize;\n          diff = nextElSize - nextElNewSize;\n          prevElNewSize = prevElSize + diff;\n        }\n\n        if (nextElMaxSize && nextElNewSize > nextElMaxSize) {\n          nextElNewSize = nextElMaxSize;\n          diff = nextElSize - nextElNewSize;\n          prevElNewSize = prevElSize + diff;\n        }\n      }\n\n      if (isAbsolute) {\n        $prevResizableEl[0].style[sizeProp] = `${prevElNewSize}px`;\n\n        if (resizeNextEl) {\n          $nextResizableEl[0].style[sizeProp] = `${nextElNewSize}px`;\n        }\n\n        $prevResizableEl.trigger('grid:resize');\n        $nextResizableEl.trigger('grid:resize');\n        app.emit('gridResize', $prevResizableEl[0]);\n        app.emit('gridResize', $nextResizableEl[0]);\n        return;\n      }\n\n      const gapAddSize = (itemsInFlow - 1) * gapSize / itemsInFlow;\n      const gapAddSizeCSS = isRow ? `${itemsInFlow - 1} * var(--f7-grid-row-gap) / ${itemsInFlow}` : '(var(--f7-cols-per-row) - 1) * var(--f7-grid-gap) / var(--f7-cols-per-row)';\n      const prevElNewSizeNormalized = prevElNewSize + gapAddSize;\n      const nextElNewSizeNormalized = nextElNewSize + gapAddSize;\n      $prevResizableEl[0].style[sizeProp] = `calc(${prevElNewSizeNormalized / parentSize * 100}% - ${gapAddSizeCSS})`;\n      $nextResizableEl[0].style[sizeProp] = `calc(${nextElNewSizeNormalized / parentSize * 100}% - ${gapAddSizeCSS})`;\n      $prevResizableEl.trigger('grid:resize');\n      $nextResizableEl.trigger('grid:resize');\n      app.emit('gridResize', $prevResizableEl[0]);\n      app.emit('gridResize', $nextResizableEl[0]);\n    }\n\n    function handleTouchEnd() {\n      if (!isTouched) return;\n\n      if (!isMoved) {\n        isTouched = false;\n      }\n\n      isTouched = false;\n      isMoved = false;\n    }\n\n    const document = getDocument();\n    $(document).on(app.touchEvents.start, '.col > .resize-handler, .row > .resize-handler', handleTouchStart);\n    app.on('touchmove', handleTouchMove);\n    app.on('touchend', handleTouchEnd);\n  }\n\n};\nexport default {\n  name: 'grid',\n\n  create() {\n    const app = this;\n    extend(app, {\n      grid: {\n        init: Grid.init.bind(app)\n      }\n    });\n  },\n\n  on: {\n    init() {\n      const app = this;\n      app.grid.init();\n    }\n\n  }\n};","map":{"version":3,"names":["getDocument","$","extend","getElMinSize","dimension","$el","minSize","css","indexOf","parseFloat","parent","getElMaxSize","maxSize","Grid","init","app","isTouched","isMoved","touchStartX","touchStartY","$resizeHandlerEl","$prevResizableEl","$nextResizableEl","prevElSize","prevElMinSize","prevElMaxSize","nextElSize","nextElMinSize","nextElMaxSize","parentSize","itemsInFlow","gapSize","isScrolling","handleTouchStart","e","target","closest","type","targetTouches","pageX","pageY","undefined","handleTouchMove","isRow","length","sizeProp","getSizeProp","hasClass","prevAll","eq","next","nextAll","children","touchCurrentX","touchCurrentY","Math","abs","isAbsolute","resizeNextEl","preventDefault","diff","prevElNewSize","nextElNewSize","style","trigger","emit","gapAddSize","gapAddSizeCSS","prevElNewSizeNormalized","nextElNewSizeNormalized","handleTouchEnd","document","on","touchEvents","start","name","create","grid","bind"],"sources":["C:/Users/Babak/userlogin/node_modules/framework7/components/grid/grid.js"],"sourcesContent":["import { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom7.js';\nimport { extend } from '../../shared/utils.js';\n\nfunction getElMinSize(dimension, $el) {\n  let minSize = $el.css(`min-${dimension}`);\n\n  if (minSize === 'auto' || minSize === 'none') {\n    minSize = 0;\n  } else if (minSize.indexOf('px') >= 0) {\n    minSize = parseFloat(minSize);\n  } else if (minSize.indexOf('%') >= 0) {\n    minSize = $el.parent()[0][dimension === 'height' ? 'offsetHeight' : 'offsetWidth'] * parseFloat(minSize) / 100;\n  }\n\n  return minSize;\n}\n\nfunction getElMaxSize(dimension, $el) {\n  let maxSize = $el.css(`max-${dimension}`);\n\n  if (maxSize === 'auto' || maxSize === 'none') {\n    maxSize = null;\n  } else if (maxSize.indexOf('px') >= 0) {\n    maxSize = parseFloat(maxSize);\n  } else if (maxSize.indexOf('%') >= 0) {\n    maxSize = $el.parent()[0][dimension === 'height' ? 'offsetHeight' : 'offsetWidth'] * parseFloat(maxSize) / 100;\n  }\n\n  return maxSize;\n}\n\nconst Grid = {\n  init() {\n    const app = this;\n    let isTouched;\n    let isMoved;\n    let touchStartX;\n    let touchStartY;\n    let $resizeHandlerEl;\n    let $prevResizableEl;\n    let $nextResizableEl;\n    let prevElSize;\n    let prevElMinSize;\n    let prevElMaxSize;\n    let nextElSize;\n    let nextElMinSize;\n    let nextElMaxSize;\n    let parentSize;\n    let itemsInFlow;\n    let gapSize;\n    let isScrolling;\n\n    function handleTouchStart(e) {\n      if (isTouched || isMoved) return;\n      $resizeHandlerEl = $(e.target).closest('.resize-handler');\n      touchStartX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchStartY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n      isTouched = true;\n      $prevResizableEl = undefined;\n      $nextResizableEl = undefined;\n      isScrolling = undefined;\n    }\n\n    function handleTouchMove(e) {\n      if (!isTouched) return;\n      const isRow = $resizeHandlerEl.parent('.row').length === 1;\n      const sizeProp = isRow ? 'height' : 'width';\n      const getSizeProp = isRow ? 'offsetHeight' : 'offsetWidth';\n\n      if (!isMoved) {\n        $prevResizableEl = $resizeHandlerEl.parent(isRow ? '.row' : '.col');\n\n        if ($prevResizableEl.length && (!$prevResizableEl.hasClass('resizable') || $prevResizableEl.hasClass('resizable-fixed'))) {\n          $prevResizableEl = $prevResizableEl.prevAll('.resizable:not(.resizable-fixed)').eq(0);\n        }\n\n        $nextResizableEl = $prevResizableEl.next(isRow ? '.row' : '.col');\n\n        if ($nextResizableEl.length && (!$nextResizableEl.hasClass('resizable') || $nextResizableEl.hasClass('resizable-fixed'))) {\n          $nextResizableEl = $nextResizableEl.nextAll('.resizable:not(.resizable-fixed)').eq(0);\n        }\n\n        if ($prevResizableEl.length) {\n          prevElSize = $prevResizableEl[0][getSizeProp];\n          prevElMinSize = getElMinSize(sizeProp, $prevResizableEl);\n          prevElMaxSize = getElMaxSize(sizeProp, $prevResizableEl);\n          parentSize = $prevResizableEl.parent()[0][getSizeProp];\n          itemsInFlow = $prevResizableEl.parent().children(isRow ? '.row' : '[class*=\"col-\"], .col').length;\n          gapSize = parseFloat($prevResizableEl.css(isRow ? '--f7-grid-row-gap' : '--f7-grid-gap'));\n        }\n\n        if ($nextResizableEl.length) {\n          nextElSize = $nextResizableEl[0][getSizeProp];\n          nextElMinSize = getElMinSize(sizeProp, $nextResizableEl);\n          nextElMaxSize = getElMaxSize(sizeProp, $nextResizableEl);\n\n          if (!$prevResizableEl.length) {\n            parentSize = $nextResizableEl.parent()[0][getSizeProp];\n            itemsInFlow = $nextResizableEl.parent().children(isRow ? '.row' : '[class*=\"col-\"], .col').length;\n            gapSize = parseFloat($nextResizableEl.css(isRow ? '--f7-grid-row-gap' : '--f7-grid-gap'));\n          }\n        }\n      }\n\n      isMoved = true;\n      const touchCurrentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n      const touchCurrentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n      if (typeof isScrolling === 'undefined' && !isRow) {\n        isScrolling = !!(isScrolling || Math.abs(touchCurrentY - touchStartY) > Math.abs(touchCurrentX - touchStartX));\n      }\n\n      if (isScrolling) {\n        isTouched = false;\n        isMoved = false;\n        return;\n      }\n\n      const isAbsolute = $prevResizableEl.hasClass('resizable-absolute') || $nextResizableEl.hasClass('resizable-absolute');\n      const resizeNextEl = !isRow || isRow && !isAbsolute;\n\n      if (resizeNextEl && !$nextResizableEl.length || !$prevResizableEl.length) {\n        isTouched = false;\n        isMoved = false;\n        return;\n      }\n\n      e.preventDefault();\n      let diff = isRow ? touchCurrentY - touchStartY : touchCurrentX - touchStartX;\n      let prevElNewSize;\n      let nextElNewSize;\n\n      if ($prevResizableEl.length) {\n        prevElNewSize = prevElSize + diff;\n\n        if (prevElNewSize < prevElMinSize) {\n          prevElNewSize = prevElMinSize;\n          diff = prevElNewSize - prevElSize;\n        }\n\n        if (prevElMaxSize && prevElNewSize > prevElMaxSize) {\n          prevElNewSize = prevElMaxSize;\n          diff = prevElNewSize - prevElSize;\n        }\n      }\n\n      if ($nextResizableEl.length && resizeNextEl) {\n        nextElNewSize = nextElSize - diff;\n\n        if (nextElNewSize < nextElMinSize) {\n          nextElNewSize = nextElMinSize;\n          diff = nextElSize - nextElNewSize;\n          prevElNewSize = prevElSize + diff;\n        }\n\n        if (nextElMaxSize && nextElNewSize > nextElMaxSize) {\n          nextElNewSize = nextElMaxSize;\n          diff = nextElSize - nextElNewSize;\n          prevElNewSize = prevElSize + diff;\n        }\n      }\n\n      if (isAbsolute) {\n        $prevResizableEl[0].style[sizeProp] = `${prevElNewSize}px`;\n\n        if (resizeNextEl) {\n          $nextResizableEl[0].style[sizeProp] = `${nextElNewSize}px`;\n        }\n\n        $prevResizableEl.trigger('grid:resize');\n        $nextResizableEl.trigger('grid:resize');\n        app.emit('gridResize', $prevResizableEl[0]);\n        app.emit('gridResize', $nextResizableEl[0]);\n        return;\n      }\n\n      const gapAddSize = (itemsInFlow - 1) * gapSize / itemsInFlow;\n      const gapAddSizeCSS = isRow ? `${itemsInFlow - 1} * var(--f7-grid-row-gap) / ${itemsInFlow}` : '(var(--f7-cols-per-row) - 1) * var(--f7-grid-gap) / var(--f7-cols-per-row)';\n      const prevElNewSizeNormalized = prevElNewSize + gapAddSize;\n      const nextElNewSizeNormalized = nextElNewSize + gapAddSize;\n      $prevResizableEl[0].style[sizeProp] = `calc(${prevElNewSizeNormalized / parentSize * 100}% - ${gapAddSizeCSS})`;\n      $nextResizableEl[0].style[sizeProp] = `calc(${nextElNewSizeNormalized / parentSize * 100}% - ${gapAddSizeCSS})`;\n      $prevResizableEl.trigger('grid:resize');\n      $nextResizableEl.trigger('grid:resize');\n      app.emit('gridResize', $prevResizableEl[0]);\n      app.emit('gridResize', $nextResizableEl[0]);\n    }\n\n    function handleTouchEnd() {\n      if (!isTouched) return;\n\n      if (!isMoved) {\n        isTouched = false;\n      }\n\n      isTouched = false;\n      isMoved = false;\n    }\n\n    const document = getDocument();\n    $(document).on(app.touchEvents.start, '.col > .resize-handler, .row > .resize-handler', handleTouchStart);\n    app.on('touchmove', handleTouchMove);\n    app.on('touchend', handleTouchEnd);\n  }\n\n};\nexport default {\n  name: 'grid',\n\n  create() {\n    const app = this;\n    extend(app, {\n      grid: {\n        init: Grid.init.bind(app)\n      }\n    });\n  },\n\n  on: {\n    init() {\n      const app = this;\n      app.grid.init();\n    }\n\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}