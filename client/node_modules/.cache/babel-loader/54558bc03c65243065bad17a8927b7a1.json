{"ast":null,"code":"import { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom7.js';\nimport { extend, parseUrlQuery } from '../../shared/utils.js';\nimport { getDevice } from '../../shared/get-device.js';\nimport History from '../../shared/history.js';\nimport redirect from './redirect.js';\nimport processRouteQueue from './process-route-queue.js';\nimport appRouterCheck from './app-router-check.js';\nimport asyncComponent from './async-component.js';\n\nfunction backward(router, el, backwardOptions) {\n  const device = getDevice();\n  const document = getDocument();\n  const $el = $(el);\n  const app = router.app;\n  const view = router.view;\n  const options = extend(false, {\n    animate: router.params.animate,\n    browserHistory: true,\n    replaceState: false\n  }, backwardOptions);\n  const masterDetailEnabled = router.params.masterDetailBreakpoint > 0;\n  const isMaster = masterDetailEnabled && options.route && options.route.route && (options.route.route.master === true || typeof options.route.route.master === 'function' && options.route.route.master(app, router));\n  let masterPageEl;\n  let masterPageRemoved;\n  const dynamicNavbar = router.dynamicNavbar;\n  const $newPage = $el;\n  const $oldPage = router.$el.children('.page-current');\n  const initialPreload = $oldPage.length === 0 && options.preload;\n  const currentIsMaster = masterDetailEnabled && $oldPage.hasClass('page-master');\n\n  if ($newPage.length) {\n    // Remove theme elements\n    router.removeThemeElements($newPage);\n  }\n\n  let $navbarsEl;\n  let $newNavbarEl;\n  let $oldNavbarEl;\n\n  if (dynamicNavbar) {\n    $newNavbarEl = $newPage.children('.navbar');\n    $navbarsEl = router.$navbarsEl;\n\n    if ($newNavbarEl.length === 0 && $newPage[0] && $newPage[0].f7Page) {\n      // Try from pageData\n      $newNavbarEl = $newPage[0].f7Page.$navbarEl;\n    }\n\n    $oldNavbarEl = $navbarsEl.find('.navbar-current');\n  }\n\n  router.allowPageChange = false;\n\n  if ($newPage.length === 0 || $oldPage.length === 0 && !options.preload) {\n    router.allowPageChange = true;\n    return router;\n  } // Remove theme elements\n\n\n  router.removeThemeElements($newPage); // Save Keep Alive Cache\n\n  if (options.route && options.route.route && options.route.route.keepAlive && !options.route.route.keepAliveData) {\n    options.route.route.keepAliveData = {\n      pageEl: $el[0]\n    };\n  } // Pages In View\n\n\n  let isDetail;\n  let isDetailRoot;\n\n  if (masterDetailEnabled) {\n    const $pagesInView = router.$el.children('.page:not(.stacked)').filter(pageInView => pageInView !== $newPage[0]); // Find Detail' master page\n\n    for (let i = 0; i < $pagesInView.length; i += 1) {\n      if (!masterPageEl && $pagesInView[i].classList.contains('page-master')) {\n        masterPageEl = $pagesInView[i];\n        continue; // eslint-disable-line\n      }\n    }\n\n    isDetail = !isMaster && masterPageEl && router.history.indexOf(options.route.url) > router.history.indexOf(masterPageEl.f7Page.route.url);\n\n    if (!isDetail && !isMaster && masterPageEl && masterPageEl.f7Page && options.route.route.masterRoute) {\n      isDetail = options.route.route.masterRoute.path === masterPageEl.f7Page.route.route.path;\n    }\n  }\n\n  if (isDetail && masterPageEl && masterPageEl.f7Page) {\n    isDetailRoot = router.history.indexOf(options.route.url) - router.history.indexOf(masterPageEl.f7Page.route.url) === 1;\n  } // New Page\n\n\n  $newPage.addClass(`page-${initialPreload ? 'current' : 'previous'}${isMaster ? ' page-master' : ''}${isDetail ? ' page-master-detail' : ''}${isDetailRoot ? ' page-master-detail-root' : ''}`).removeClass('stacked').removeAttr('aria-hidden').trigger('page:unstack').trigger('page:position', {\n    position: initialPreload ? 'current' : 'previous'\n  });\n  router.emit('pageUnstack', $newPage[0]);\n  router.emit('pagePosition', $newPage[0], initialPreload ? 'current' : 'previous');\n\n  if (isMaster || isDetail) {\n    $newPage.trigger('page:role', {\n      role: isMaster ? 'master' : 'detail',\n      root: !!isDetailRoot\n    });\n    router.emit('pageRole', $newPage[0], {\n      role: isMaster ? 'master' : 'detail',\n      detailRoot: !!isDetailRoot\n    });\n  }\n\n  if (dynamicNavbar && $newNavbarEl.length > 0) {\n    $newNavbarEl.addClass(`navbar-${initialPreload ? 'current' : 'previous'}${isMaster ? ' navbar-master' : ''}${isDetail ? ' navbar-master-detail' : ''}${isDetailRoot ? ' navbar-master-detail-root' : ''}`).removeClass('stacked').removeAttr('aria-hidden');\n    $newNavbarEl.trigger('navbar:position', {\n      position: initialPreload ? 'current' : 'previous'\n    });\n    router.emit('navbarPosition', $newNavbarEl[0], initialPreload ? 'current' : 'previous');\n\n    if (isMaster || isDetailRoot) {\n      router.emit('navbarRole', $newNavbarEl[0], {\n        role: isMaster ? 'master' : 'detail',\n        detailRoot: !!isDetailRoot\n      });\n    }\n  } // Remove previous page in case of \"forced\"\n\n\n  let backIndex;\n\n  if (options.force) {\n    if ($oldPage.prev('.page-previous:not(.stacked)').length > 0 || $oldPage.prev('.page-previous').length === 0) {\n      if (router.history.indexOf(options.route.url) >= 0) {\n        backIndex = router.history.length - router.history.indexOf(options.route.url) - 1;\n        router.history = router.history.slice(0, router.history.indexOf(options.route.url) + 2);\n        view.history = router.history;\n      } else if (router.history[[router.history.length - 2]]) {\n        router.history[router.history.length - 2] = options.route.url;\n      } else {\n        router.history.unshift(router.url);\n      }\n\n      if (backIndex && router.params.stackPages) {\n        $oldPage.prevAll('.page-previous').each(pageToRemove => {\n          const $pageToRemove = $(pageToRemove);\n          let $navbarToRemove;\n\n          if (dynamicNavbar) {\n            // $navbarToRemove = $oldNavbarEl.prevAll('.navbar-previous').eq(index);\n            $navbarToRemove = $(app.navbar.getElByPage($pageToRemove));\n          }\n\n          if ($pageToRemove[0] !== $newPage[0] && $pageToRemove.index() > $newPage.index()) {\n            if (router.initialPages.indexOf($pageToRemove[0]) >= 0) {\n              $pageToRemove.addClass('stacked');\n              $pageToRemove.trigger('page:stack');\n              router.emit('pageStack', $pageToRemove[0]);\n\n              if (dynamicNavbar) {\n                $navbarToRemove.addClass('stacked');\n              }\n            } else {\n              router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined, options);\n\n              if ($pageToRemove[0] === masterPageEl) {\n                masterPageRemoved = true;\n              }\n\n              router.removePage($pageToRemove);\n\n              if (dynamicNavbar && $navbarToRemove.length > 0) {\n                router.removeNavbar($navbarToRemove);\n              }\n            }\n          }\n        });\n      } else {\n        const $pageToRemove = $oldPage.prev('.page-previous:not(.stacked)');\n        let $navbarToRemove;\n\n        if (dynamicNavbar) {\n          // $navbarToRemove = $oldNavbarEl.prev('.navbar-inner:not(.stacked)');\n          $navbarToRemove = $(app.navbar.getElByPage($pageToRemove));\n        }\n\n        if (router.params.stackPages && router.initialPages.indexOf($pageToRemove[0]) >= 0) {\n          $pageToRemove.addClass('stacked');\n          $pageToRemove.trigger('page:stack');\n          router.emit('pageStack', $pageToRemove[0]);\n          $navbarToRemove.addClass('stacked');\n        } else if ($pageToRemove.length > 0) {\n          router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined, options);\n\n          if ($pageToRemove[0] === masterPageEl) {\n            masterPageRemoved = true;\n          }\n\n          router.removePage($pageToRemove);\n\n          if (dynamicNavbar && $navbarToRemove.length) {\n            router.removeNavbar($navbarToRemove);\n          }\n        }\n      }\n    }\n  } // Insert new page\n\n\n  const newPageInDom = $newPage.parents(document).length > 0;\n  const f7Component = $newPage[0].f7Component;\n\n  function insertPage() {\n    if (initialPreload) {\n      if (!newPageInDom && f7Component) {\n        f7Component.mount(componentEl => {\n          router.$el.append(componentEl);\n        });\n      } else {\n        router.$el.append($newPage);\n      }\n    }\n\n    if ($newPage.next($oldPage).length === 0) {\n      if (!newPageInDom && f7Component) {\n        f7Component.mount(componentEl => {\n          $(componentEl).insertBefore($oldPage);\n        });\n      } else {\n        $newPage.insertBefore($oldPage);\n      }\n    }\n\n    if (dynamicNavbar && $newNavbarEl.length) {\n      if ($newNavbarEl.find('.title-large').length) {\n        $newNavbarEl.addClass('navbar-large');\n      }\n\n      $newNavbarEl.insertBefore($oldNavbarEl);\n\n      if ($oldNavbarEl.length > 0) {\n        $newNavbarEl.insertBefore($oldNavbarEl);\n      } else {\n        if (!router.$navbarsEl.parents(document).length) {\n          router.$el.prepend(router.$navbarsEl);\n        }\n\n        $navbarsEl.append($newNavbarEl);\n      }\n    }\n\n    if (!newPageInDom) {\n      router.pageCallback('mounted', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);\n    } else if (options.route && options.route.route && options.route.route.keepAlive && !$newPage[0].f7PageMounted) {\n      $newPage[0].f7PageMounted = true;\n      router.pageCallback('mounted', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);\n    }\n  }\n\n  if (options.preload) {\n    // Insert Page\n    insertPage(); // Tab route\n\n    if (options.route.route.tab) {\n      router.tabLoad(options.route.route.tab, extend({}, options, {\n        history: false,\n        browserHistory: false,\n        preload: true\n      }));\n    }\n\n    if (isMaster) {\n      $newPage.removeClass('page-master-stacked').trigger('page:masterunstack');\n      router.emit('pageMasterUnstack', $newPage[0]);\n\n      if (dynamicNavbar) {\n        $(app.navbar.getElByPage($newPage)).removeClass('navbar-master-stacked');\n        router.emit('navbarMasterUnstack', app.navbar.getElByPage($newPage));\n      }\n    } // Page init and before init events\n\n\n    router.pageCallback('init', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);\n\n    if (initialPreload) {\n      router.pageCallback('beforeIn', $newPage, $newNavbarEl, 'current', undefined, options);\n      router.pageCallback('afterIn', $newPage, $newNavbarEl, 'current', undefined, options);\n    }\n\n    const $previousPages = $newPage.prevAll('.page-previous:not(.stacked):not(.page-master)');\n\n    if ($previousPages.length > 0) {\n      $previousPages.each(pageToRemove => {\n        const $pageToRemove = $(pageToRemove);\n        let $navbarToRemove;\n\n        if (dynamicNavbar) {\n          // $navbarToRemove = $newNavbarEl.prevAll('.navbar-previous:not(.stacked)').eq(index);\n          $navbarToRemove = $(app.navbar.getElByPage($pageToRemove));\n        }\n\n        if (router.params.stackPages && router.initialPages.indexOf(pageToRemove) >= 0) {\n          $pageToRemove.addClass('stacked');\n          $pageToRemove.trigger('page:stack');\n          router.emit('pageStack', $pageToRemove[0]);\n\n          if (dynamicNavbar) {\n            $navbarToRemove.addClass('stacked');\n          }\n        } else {\n          router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined);\n          router.removePage($pageToRemove);\n\n          if (dynamicNavbar && $navbarToRemove.length) {\n            router.removeNavbar($navbarToRemove);\n          }\n        }\n      });\n    }\n\n    router.allowPageChange = true;\n    return router;\n  } // History State\n\n\n  if (!(device.ie || device.edge || device.firefox && !device.ios)) {\n    if (router.params.browserHistory && options.browserHistory) {\n      if (options.replaceState) {\n        const browserHistoryRoot = router.params.browserHistoryRoot || '';\n        History.replace(view.id, {\n          url: options.route.url\n        }, browserHistoryRoot + router.params.browserHistorySeparator + options.route.url);\n      } else if (backIndex) {\n        History.go(-backIndex);\n      } else {\n        History.back();\n      }\n    }\n  } // Update History\n\n\n  if (options.replaceState) {\n    router.history[router.history.length - 1] = options.route.url;\n  } else {\n    if (router.history.length === 1) {\n      router.history.unshift(router.url);\n    }\n\n    router.history.pop();\n  }\n\n  router.saveHistory(); // Current Page & Navbar\n\n  router.currentPageEl = $newPage[0];\n\n  if (dynamicNavbar && $newNavbarEl.length) {\n    router.currentNavbarEl = $newNavbarEl[0];\n  } else {\n    delete router.currentNavbarEl;\n  } // Current Route\n\n\n  router.currentRoute = options.route; // History State\n\n  if (device.ie || device.edge || device.firefox && !device.ios) {\n    if (router.params.browserHistory && options.browserHistory) {\n      if (options.replaceState) {\n        const browserHistoryRoot = router.params.browserHistoryRoot || '';\n        History.replace(view.id, {\n          url: options.route.url\n        }, browserHistoryRoot + router.params.browserHistorySeparator + options.route.url);\n      } else if (backIndex) {\n        History.go(-backIndex);\n      } else {\n        History.back();\n      }\n    }\n  } // Insert Page\n\n\n  insertPage(); // Load Tab\n\n  if (options.route.route.tab) {\n    router.tabLoad(options.route.route.tab, extend({}, options, {\n      history: false,\n      browserHistory: false\n    }));\n  } // Check master detail\n\n\n  if (masterDetailEnabled && (currentIsMaster || masterPageRemoved)) {\n    view.checkMasterDetailBreakpoint(false);\n  } // Page init and before init events\n\n\n  router.pageCallback('init', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage); // Before animation callback\n\n  router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', 'next', options);\n  router.pageCallback('beforeIn', $newPage, $newNavbarEl, 'previous', 'current', options); // Animation\n\n  function afterAnimation() {\n    // Set classes\n    router.setPagePosition($newPage, 'current', false);\n    router.setPagePosition($oldPage, 'next', true);\n\n    if (dynamicNavbar) {\n      router.setNavbarPosition($newNavbarEl, 'current', false);\n      router.setNavbarPosition($oldNavbarEl, 'next', true);\n    } // After animation event\n\n\n    router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', 'next', options);\n    router.pageCallback('afterIn', $newPage, $newNavbarEl, 'previous', 'current', options); // Remove Old Page\n\n    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {\n      $oldPage.addClass('stacked');\n      $oldPage.trigger('page:stack');\n      router.emit('pageStack', $oldPage[0]);\n\n      if (dynamicNavbar) {\n        $oldNavbarEl.addClass('stacked');\n      }\n    } else {\n      router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'next', undefined, options);\n      router.removePage($oldPage);\n\n      if (dynamicNavbar && $oldNavbarEl.length) {\n        router.removeNavbar($oldNavbarEl);\n      }\n    }\n\n    router.allowPageChange = true;\n    router.emit('routeChanged', router.currentRoute, router.previousRoute, router); // Preload previous page\n\n    const preloadPreviousPage = router.params.preloadPreviousPage || router.params[`${app.theme}SwipeBack`];\n\n    if (preloadPreviousPage && router.history[router.history.length - 2] && !isMaster) {\n      router.back(router.history[router.history.length - 2], {\n        preload: true\n      });\n    }\n\n    if (router.params.browserHistory) {\n      History.clearRouterQueue();\n    }\n  }\n\n  function setPositionClasses() {\n    router.setPagePosition($oldPage, 'current');\n    router.setPagePosition($newPage, 'previous', false);\n\n    if (dynamicNavbar) {\n      router.setNavbarPosition($oldNavbarEl, 'current');\n      router.setNavbarPosition($newNavbarEl, 'previous', false);\n    }\n  }\n\n  if (options.animate && !(currentIsMaster && app.width >= router.params.masterDetailBreakpoint)) {\n    let transition = router.params.transition;\n\n    if ($oldPage[0] && $oldPage[0].f7PageTransition) {\n      transition = $oldPage[0].f7PageTransition;\n      delete $oldPage[0].f7PageTransition;\n    }\n\n    if (options.transition) transition = options.transition;\n\n    if (!transition && router.previousRoute && router.previousRoute.route) {\n      transition = router.previousRoute.route.transition;\n    }\n\n    if (!transition && router.previousRoute && router.previousRoute.route && router.previousRoute.route.options) {\n      transition = router.previousRoute.route.options.transition;\n    }\n\n    setPositionClasses();\n    router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, 'backward', transition, () => {\n      afterAnimation();\n    });\n  } else {\n    afterAnimation();\n  }\n\n  return router;\n}\n\nfunction loadBack(router, backParams, backOptions, ignorePageChange) {\n  if (!router.allowPageChange && !ignorePageChange) return router;\n  const params = backParams;\n  const options = backOptions;\n  const {\n    url,\n    content,\n    el,\n    pageName,\n    component,\n    componentUrl\n  } = params;\n\n  if (options.route.url && router.url === options.route.url && !(options.reloadCurrent || options.reloadPrevious) && !router.params.allowDuplicateUrls) {\n    return false;\n  }\n\n  if (!options.route && url) {\n    options.route = router.parseRouteUrl(url);\n  } // Component Callbacks\n\n\n  function resolve(pageEl, newOptions) {\n    return backward(router, pageEl, extend(options, newOptions));\n  }\n\n  function reject() {\n    router.allowPageChange = true;\n    return router;\n  }\n\n  if (url || componentUrl || component) {\n    router.allowPageChange = false;\n  } // Proceed\n\n\n  if (content) {\n    backward(router, router.getPageEl(content), options);\n  } else if (el) {\n    // Load page from specified HTMLElement or by page name in pages container\n    backward(router, router.getPageEl(el), options);\n  } else if (pageName) {\n    // Load page by page name in pages container\n    backward(router, router.$el.children(`.page[data-name=\"${pageName}\"]`).eq(0), options);\n  } else if (component || componentUrl) {\n    // Load from component (F7/Vue/React/...)\n    try {\n      router.pageComponentLoader({\n        routerEl: router.el,\n        component,\n        componentUrl,\n        options,\n        resolve,\n        reject\n      });\n    } catch (err) {\n      router.allowPageChange = true;\n      throw err;\n    }\n  } else if (url) {\n    // Load using XHR\n    if (router.xhrAbortController) {\n      router.xhrAbortController.abort();\n      router.xhrAbortController = false;\n    }\n\n    router.xhrRequest(url, options).then(pageContent => {\n      backward(router, router.getPageEl(pageContent), options);\n    }).catch(() => {\n      router.allowPageChange = true;\n    });\n  }\n\n  return router;\n}\n\nfunction back() {\n  const router = this;\n  const device = getDevice();\n  if (router.swipeBackActive) return router;\n  let navigateUrl;\n  let navigateOptions;\n  let route;\n\n  if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'object') {\n    navigateOptions = (arguments.length <= 0 ? undefined : arguments[0]) || {};\n  } else {\n    navigateUrl = arguments.length <= 0 ? undefined : arguments[0];\n    navigateOptions = (arguments.length <= 1 ? undefined : arguments[1]) || {};\n  }\n\n  const {\n    name,\n    params,\n    query\n  } = navigateOptions;\n\n  if (name) {\n    navigateUrl = router.generateUrl({\n      name,\n      params,\n      query\n    });\n\n    if (navigateUrl) {\n      return router.back(navigateUrl, extend({}, navigateOptions, {\n        name: null,\n        params: null,\n        query: null\n      }));\n    }\n\n    return router;\n  }\n\n  const app = router.app;\n  appRouterCheck(router, 'back');\n  let currentRouteIsModal = router.currentRoute.modal;\n  let modalType;\n\n  if (!currentRouteIsModal) {\n    'popup popover sheet loginScreen actions customModal panel'.split(' ').forEach(modalLoadProp => {\n      if (router.currentRoute.route[modalLoadProp]) {\n        currentRouteIsModal = true;\n        modalType = modalLoadProp;\n      }\n    });\n  }\n\n  if (currentRouteIsModal && !navigateOptions.preload) {\n    const modalToClose = router.currentRoute.modal || router.currentRoute.route.modalInstance || app[modalType].get();\n    const previousUrl = router.history[router.history.length - 2];\n    let previousRoute; // check if previous route is modal too\n\n    if (modalToClose && modalToClose.$el) {\n      const prevOpenedModals = modalToClose.$el.prevAll('.modal-in');\n\n      if (prevOpenedModals.length && prevOpenedModals[0].f7Modal) {\n        const modalEl = prevOpenedModals[0]; // check if current router not inside of the modalEl\n\n        if (!router.$el.parents(modalEl).length) {\n          previousRoute = modalEl.f7Modal.route;\n        }\n      }\n    }\n\n    if (!previousRoute) {\n      previousRoute = router.findMatchingRoute(previousUrl);\n    }\n\n    if (!previousRoute && previousUrl) {\n      previousRoute = {\n        url: previousUrl,\n        path: previousUrl.split('?')[0],\n        query: parseUrlQuery(previousUrl),\n        route: {\n          path: previousUrl.split('?')[0],\n          url: previousUrl\n        }\n      };\n    }\n\n    if (!navigateUrl || navigateUrl.replace(/[# ]/g, '').trim().length === 0) {\n      if (!previousRoute || !modalToClose) {\n        return router;\n      }\n    }\n\n    const forceOtherUrl = navigateOptions.force && previousRoute && navigateUrl;\n\n    if (previousRoute && modalToClose) {\n      const isBrokenBrowserHistory = device.ie || device.edge || device.firefox && !device.ios;\n      const needHistoryBack = router.params.browserHistory && navigateOptions.browserHistory !== false;\n      const currentRouteWithoutBrowserHistory = router.currentRoute && router.currentRoute.route && router.currentRoute.route.options && router.currentRoute.route.options.browserHistory === false;\n\n      if (needHistoryBack && !isBrokenBrowserHistory && !currentRouteWithoutBrowserHistory) {\n        History.back();\n      }\n\n      router.currentRoute = previousRoute;\n      router.history.pop();\n      router.saveHistory();\n\n      if (needHistoryBack && isBrokenBrowserHistory && !currentRouteWithoutBrowserHistory) {\n        History.back();\n      }\n\n      router.modalRemove(modalToClose);\n\n      if (forceOtherUrl) {\n        router.navigate(navigateUrl, {\n          reloadCurrent: true\n        });\n      }\n    } else if (modalToClose) {\n      router.modalRemove(modalToClose);\n\n      if (navigateUrl) {\n        router.navigate(navigateUrl, {\n          reloadCurrent: true\n        });\n      }\n    }\n\n    return router;\n  }\n\n  let $previousPage = router.$el.children('.page-current').prevAll('.page-previous:not(.page-master)').eq(0);\n  let skipMaster;\n\n  if (router.params.masterDetailBreakpoint > 0) {\n    const classes = [];\n    router.$el.children('.page').each(pageEl => {\n      classes.push(pageEl.className);\n    });\n    const $previousMaster = router.$el.children('.page-current').prevAll('.page-master').eq(0);\n\n    if ($previousMaster.length) {\n      const expectedPreviousPageUrl = router.history[router.history.length - 2];\n      const expectedPreviousPageRoute = router.findMatchingRoute(expectedPreviousPageUrl);\n\n      if (expectedPreviousPageRoute && $previousMaster[0].f7Page && expectedPreviousPageRoute.route === $previousMaster[0].f7Page.route.route) {\n        $previousPage = $previousMaster;\n\n        if (!navigateOptions.preload) {\n          skipMaster = app.width >= router.params.masterDetailBreakpoint;\n        }\n      }\n    }\n  }\n\n  if (!navigateOptions.force && $previousPage.length && !skipMaster) {\n    if (router.params.browserHistory && $previousPage[0].f7Page && router.history[router.history.length - 2] !== $previousPage[0].f7Page.route.url) {\n      router.back(router.history[router.history.length - 2], extend(navigateOptions, {\n        force: true\n      }));\n      return router;\n    }\n\n    const previousPageRoute = $previousPage[0].f7Page.route;\n\n    if (navigateOptions.preload && $previousPage.hasClass('stacked')) {\n      loadBack(router, {\n        el: $previousPage\n      }, extend(navigateOptions, {\n        route: previousPageRoute\n      }));\n      return router;\n    }\n\n    processRouteQueue.call(router, previousPageRoute, router.currentRoute, () => {\n      loadBack(router, {\n        el: $previousPage\n      }, extend(navigateOptions, {\n        route: previousPageRoute\n      }));\n    }, () => {}, 'backward');\n    return router;\n  } // Navigate URL\n\n\n  if (navigateUrl === '#') {\n    navigateUrl = undefined;\n  }\n\n  if (navigateUrl && navigateUrl[0] !== '/' && navigateUrl.indexOf('#') !== 0) {\n    navigateUrl = ((router.path || '/') + navigateUrl).replace('//', '/');\n  }\n\n  if (!navigateUrl && router.history.length > 1) {\n    navigateUrl = router.history[router.history.length - 2];\n  }\n\n  if (skipMaster && !navigateOptions.force && router.history[router.history.length - 3]) {\n    return router.back(router.history[router.history.length - 3], extend({}, navigateOptions || {}, {\n      force: true,\n      animate: false\n    }));\n  }\n\n  if (skipMaster && !navigateOptions.force) {\n    return router;\n  } // Find route to load\n\n\n  route = router.findMatchingRoute(navigateUrl);\n\n  if (!route) {\n    if (navigateUrl) {\n      route = {\n        url: navigateUrl,\n        path: navigateUrl.split('?')[0],\n        query: parseUrlQuery(navigateUrl),\n        route: {\n          path: navigateUrl.split('?')[0],\n          url: navigateUrl\n        }\n      };\n    }\n  }\n\n  if (!route) {\n    return router;\n  }\n\n  if (route.route.redirect) {\n    return redirect.call(router, 'backward', route, navigateOptions);\n  }\n\n  const options = {};\n\n  if (route.route.options) {\n    extend(options, route.route.options, navigateOptions);\n  } else {\n    extend(options, navigateOptions);\n  }\n\n  options.route = route;\n  let backForceLoaded;\n\n  if (options.force && router.params.stackPages) {\n    router.$el.children('.page-previous.stacked').each(pageEl => {\n      if (pageEl.f7Page && pageEl.f7Page.route && pageEl.f7Page.route.url === route.url) {\n        backForceLoaded = true;\n        loadBack(router, {\n          el: pageEl\n        }, options);\n      }\n    });\n\n    if (backForceLoaded) {\n      return router;\n    }\n  }\n\n  function resolve() {\n    let routerLoaded = false;\n\n    if (route.route.keepAlive && route.route.keepAliveData) {\n      loadBack(router, {\n        el: route.route.keepAliveData.pageEl\n      }, options);\n      routerLoaded = true;\n    }\n\n    'url content component pageName el componentUrl'.split(' ').forEach(pageLoadProp => {\n      if (route.route[pageLoadProp] && !routerLoaded) {\n        routerLoaded = true;\n        loadBack(router, {\n          [pageLoadProp]: route.route[pageLoadProp]\n        }, options);\n      }\n    });\n    if (routerLoaded) return; // Async\n\n    function asyncResolve(resolveParams, resolveOptions) {\n      router.allowPageChange = false;\n      loadBack(router, resolveParams, extend(options, resolveOptions), true);\n    }\n\n    function asyncReject() {\n      router.allowPageChange = true;\n    }\n\n    if (route.route.async) {\n      router.allowPageChange = false;\n      route.route.async.call(router, {\n        router,\n        to: route,\n        from: router.currentRoute,\n        resolve: asyncResolve,\n        reject: asyncReject,\n        direction: 'backward',\n        app\n      });\n    }\n\n    if (route.route.asyncComponent) {\n      asyncComponent(router, route.route.asyncComponent, asyncResolve, asyncReject);\n    }\n  }\n\n  function reject() {\n    router.allowPageChange = true;\n  }\n\n  if (options.preload) {\n    resolve();\n  } else {\n    processRouteQueue.call(router, route, router.currentRoute, () => {\n      if (route.route.modules) {\n        app.loadModules(Array.isArray(route.route.modules) ? route.route.modules : [route.route.modules]).then(() => {\n          resolve();\n        }).catch(() => {\n          reject();\n        });\n      } else {\n        resolve();\n      }\n    }, () => {\n      reject();\n    }, 'backward');\n  } // Return Router\n\n\n  return router;\n}\n\nexport { back };","map":{"version":3,"names":["getDocument","$","extend","parseUrlQuery","getDevice","History","redirect","processRouteQueue","appRouterCheck","asyncComponent","backward","router","el","backwardOptions","device","document","$el","app","view","options","animate","params","browserHistory","replaceState","masterDetailEnabled","masterDetailBreakpoint","isMaster","route","master","masterPageEl","masterPageRemoved","dynamicNavbar","$newPage","$oldPage","children","initialPreload","length","preload","currentIsMaster","hasClass","removeThemeElements","$navbarsEl","$newNavbarEl","$oldNavbarEl","f7Page","$navbarEl","find","allowPageChange","keepAlive","keepAliveData","pageEl","isDetail","isDetailRoot","$pagesInView","filter","pageInView","i","classList","contains","history","indexOf","url","masterRoute","path","addClass","removeClass","removeAttr","trigger","position","emit","role","root","detailRoot","backIndex","force","prev","slice","unshift","stackPages","prevAll","each","pageToRemove","$pageToRemove","$navbarToRemove","navbar","getElByPage","index","initialPages","pageCallback","undefined","removePage","removeNavbar","newPageInDom","parents","f7Component","insertPage","mount","componentEl","append","next","insertBefore","prepend","f7PageMounted","tab","tabLoad","$previousPages","ie","edge","firefox","ios","browserHistoryRoot","replace","id","browserHistorySeparator","go","back","pop","saveHistory","currentPageEl","currentNavbarEl","currentRoute","checkMasterDetailBreakpoint","afterAnimation","setPagePosition","setNavbarPosition","previousRoute","preloadPreviousPage","theme","clearRouterQueue","setPositionClasses","width","transition","f7PageTransition","loadBack","backParams","backOptions","ignorePageChange","content","pageName","component","componentUrl","reloadCurrent","reloadPrevious","allowDuplicateUrls","parseRouteUrl","resolve","newOptions","reject","getPageEl","eq","pageComponentLoader","routerEl","err","xhrAbortController","abort","xhrRequest","then","pageContent","catch","swipeBackActive","navigateUrl","navigateOptions","arguments","name","query","generateUrl","currentRouteIsModal","modal","modalType","split","forEach","modalLoadProp","modalToClose","modalInstance","get","previousUrl","prevOpenedModals","f7Modal","modalEl","findMatchingRoute","trim","forceOtherUrl","isBrokenBrowserHistory","needHistoryBack","currentRouteWithoutBrowserHistory","modalRemove","navigate","$previousPage","skipMaster","classes","push","className","$previousMaster","expectedPreviousPageUrl","expectedPreviousPageRoute","previousPageRoute","call","backForceLoaded","routerLoaded","pageLoadProp","asyncResolve","resolveParams","resolveOptions","asyncReject","async","to","from","direction","modules","loadModules","Array","isArray"],"sources":["C:/Users/Babak/userlogin/node_modules/framework7/modules/router/back.js"],"sourcesContent":["import { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom7.js';\nimport { extend, parseUrlQuery } from '../../shared/utils.js';\nimport { getDevice } from '../../shared/get-device.js';\nimport History from '../../shared/history.js';\nimport redirect from './redirect.js';\nimport processRouteQueue from './process-route-queue.js';\nimport appRouterCheck from './app-router-check.js';\nimport asyncComponent from './async-component.js';\n\nfunction backward(router, el, backwardOptions) {\n  const device = getDevice();\n  const document = getDocument();\n  const $el = $(el);\n  const app = router.app;\n  const view = router.view;\n  const options = extend(false, {\n    animate: router.params.animate,\n    browserHistory: true,\n    replaceState: false\n  }, backwardOptions);\n  const masterDetailEnabled = router.params.masterDetailBreakpoint > 0;\n  const isMaster = masterDetailEnabled && options.route && options.route.route && (options.route.route.master === true || typeof options.route.route.master === 'function' && options.route.route.master(app, router));\n  let masterPageEl;\n  let masterPageRemoved;\n  const dynamicNavbar = router.dynamicNavbar;\n  const $newPage = $el;\n  const $oldPage = router.$el.children('.page-current');\n  const initialPreload = $oldPage.length === 0 && options.preload;\n  const currentIsMaster = masterDetailEnabled && $oldPage.hasClass('page-master');\n\n  if ($newPage.length) {\n    // Remove theme elements\n    router.removeThemeElements($newPage);\n  }\n\n  let $navbarsEl;\n  let $newNavbarEl;\n  let $oldNavbarEl;\n\n  if (dynamicNavbar) {\n    $newNavbarEl = $newPage.children('.navbar');\n    $navbarsEl = router.$navbarsEl;\n\n    if ($newNavbarEl.length === 0 && $newPage[0] && $newPage[0].f7Page) {\n      // Try from pageData\n      $newNavbarEl = $newPage[0].f7Page.$navbarEl;\n    }\n\n    $oldNavbarEl = $navbarsEl.find('.navbar-current');\n  }\n\n  router.allowPageChange = false;\n\n  if ($newPage.length === 0 || $oldPage.length === 0 && !options.preload) {\n    router.allowPageChange = true;\n    return router;\n  } // Remove theme elements\n\n\n  router.removeThemeElements($newPage); // Save Keep Alive Cache\n\n  if (options.route && options.route.route && options.route.route.keepAlive && !options.route.route.keepAliveData) {\n    options.route.route.keepAliveData = {\n      pageEl: $el[0]\n    };\n  } // Pages In View\n\n\n  let isDetail;\n  let isDetailRoot;\n\n  if (masterDetailEnabled) {\n    const $pagesInView = router.$el.children('.page:not(.stacked)').filter(pageInView => pageInView !== $newPage[0]); // Find Detail' master page\n\n    for (let i = 0; i < $pagesInView.length; i += 1) {\n      if (!masterPageEl && $pagesInView[i].classList.contains('page-master')) {\n        masterPageEl = $pagesInView[i];\n        continue; // eslint-disable-line\n      }\n    }\n\n    isDetail = !isMaster && masterPageEl && router.history.indexOf(options.route.url) > router.history.indexOf(masterPageEl.f7Page.route.url);\n\n    if (!isDetail && !isMaster && masterPageEl && masterPageEl.f7Page && options.route.route.masterRoute) {\n      isDetail = options.route.route.masterRoute.path === masterPageEl.f7Page.route.route.path;\n    }\n  }\n\n  if (isDetail && masterPageEl && masterPageEl.f7Page) {\n    isDetailRoot = router.history.indexOf(options.route.url) - router.history.indexOf(masterPageEl.f7Page.route.url) === 1;\n  } // New Page\n\n\n  $newPage.addClass(`page-${initialPreload ? 'current' : 'previous'}${isMaster ? ' page-master' : ''}${isDetail ? ' page-master-detail' : ''}${isDetailRoot ? ' page-master-detail-root' : ''}`).removeClass('stacked').removeAttr('aria-hidden').trigger('page:unstack').trigger('page:position', {\n    position: initialPreload ? 'current' : 'previous'\n  });\n  router.emit('pageUnstack', $newPage[0]);\n  router.emit('pagePosition', $newPage[0], initialPreload ? 'current' : 'previous');\n\n  if (isMaster || isDetail) {\n    $newPage.trigger('page:role', {\n      role: isMaster ? 'master' : 'detail',\n      root: !!isDetailRoot\n    });\n    router.emit('pageRole', $newPage[0], {\n      role: isMaster ? 'master' : 'detail',\n      detailRoot: !!isDetailRoot\n    });\n  }\n\n  if (dynamicNavbar && $newNavbarEl.length > 0) {\n    $newNavbarEl.addClass(`navbar-${initialPreload ? 'current' : 'previous'}${isMaster ? ' navbar-master' : ''}${isDetail ? ' navbar-master-detail' : ''}${isDetailRoot ? ' navbar-master-detail-root' : ''}`).removeClass('stacked').removeAttr('aria-hidden');\n    $newNavbarEl.trigger('navbar:position', {\n      position: initialPreload ? 'current' : 'previous'\n    });\n    router.emit('navbarPosition', $newNavbarEl[0], initialPreload ? 'current' : 'previous');\n\n    if (isMaster || isDetailRoot) {\n      router.emit('navbarRole', $newNavbarEl[0], {\n        role: isMaster ? 'master' : 'detail',\n        detailRoot: !!isDetailRoot\n      });\n    }\n  } // Remove previous page in case of \"forced\"\n\n\n  let backIndex;\n\n  if (options.force) {\n    if ($oldPage.prev('.page-previous:not(.stacked)').length > 0 || $oldPage.prev('.page-previous').length === 0) {\n      if (router.history.indexOf(options.route.url) >= 0) {\n        backIndex = router.history.length - router.history.indexOf(options.route.url) - 1;\n        router.history = router.history.slice(0, router.history.indexOf(options.route.url) + 2);\n        view.history = router.history;\n      } else if (router.history[[router.history.length - 2]]) {\n        router.history[router.history.length - 2] = options.route.url;\n      } else {\n        router.history.unshift(router.url);\n      }\n\n      if (backIndex && router.params.stackPages) {\n        $oldPage.prevAll('.page-previous').each(pageToRemove => {\n          const $pageToRemove = $(pageToRemove);\n          let $navbarToRemove;\n\n          if (dynamicNavbar) {\n            // $navbarToRemove = $oldNavbarEl.prevAll('.navbar-previous').eq(index);\n            $navbarToRemove = $(app.navbar.getElByPage($pageToRemove));\n          }\n\n          if ($pageToRemove[0] !== $newPage[0] && $pageToRemove.index() > $newPage.index()) {\n            if (router.initialPages.indexOf($pageToRemove[0]) >= 0) {\n              $pageToRemove.addClass('stacked');\n              $pageToRemove.trigger('page:stack');\n              router.emit('pageStack', $pageToRemove[0]);\n\n              if (dynamicNavbar) {\n                $navbarToRemove.addClass('stacked');\n              }\n            } else {\n              router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined, options);\n\n              if ($pageToRemove[0] === masterPageEl) {\n                masterPageRemoved = true;\n              }\n\n              router.removePage($pageToRemove);\n\n              if (dynamicNavbar && $navbarToRemove.length > 0) {\n                router.removeNavbar($navbarToRemove);\n              }\n            }\n          }\n        });\n      } else {\n        const $pageToRemove = $oldPage.prev('.page-previous:not(.stacked)');\n        let $navbarToRemove;\n\n        if (dynamicNavbar) {\n          // $navbarToRemove = $oldNavbarEl.prev('.navbar-inner:not(.stacked)');\n          $navbarToRemove = $(app.navbar.getElByPage($pageToRemove));\n        }\n\n        if (router.params.stackPages && router.initialPages.indexOf($pageToRemove[0]) >= 0) {\n          $pageToRemove.addClass('stacked');\n          $pageToRemove.trigger('page:stack');\n          router.emit('pageStack', $pageToRemove[0]);\n          $navbarToRemove.addClass('stacked');\n        } else if ($pageToRemove.length > 0) {\n          router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined, options);\n\n          if ($pageToRemove[0] === masterPageEl) {\n            masterPageRemoved = true;\n          }\n\n          router.removePage($pageToRemove);\n\n          if (dynamicNavbar && $navbarToRemove.length) {\n            router.removeNavbar($navbarToRemove);\n          }\n        }\n      }\n    }\n  } // Insert new page\n\n\n  const newPageInDom = $newPage.parents(document).length > 0;\n  const f7Component = $newPage[0].f7Component;\n\n  function insertPage() {\n    if (initialPreload) {\n      if (!newPageInDom && f7Component) {\n        f7Component.mount(componentEl => {\n          router.$el.append(componentEl);\n        });\n      } else {\n        router.$el.append($newPage);\n      }\n    }\n\n    if ($newPage.next($oldPage).length === 0) {\n      if (!newPageInDom && f7Component) {\n        f7Component.mount(componentEl => {\n          $(componentEl).insertBefore($oldPage);\n        });\n      } else {\n        $newPage.insertBefore($oldPage);\n      }\n    }\n\n    if (dynamicNavbar && $newNavbarEl.length) {\n      if ($newNavbarEl.find('.title-large').length) {\n        $newNavbarEl.addClass('navbar-large');\n      }\n\n      $newNavbarEl.insertBefore($oldNavbarEl);\n\n      if ($oldNavbarEl.length > 0) {\n        $newNavbarEl.insertBefore($oldNavbarEl);\n      } else {\n        if (!router.$navbarsEl.parents(document).length) {\n          router.$el.prepend(router.$navbarsEl);\n        }\n\n        $navbarsEl.append($newNavbarEl);\n      }\n    }\n\n    if (!newPageInDom) {\n      router.pageCallback('mounted', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);\n    } else if (options.route && options.route.route && options.route.route.keepAlive && !$newPage[0].f7PageMounted) {\n      $newPage[0].f7PageMounted = true;\n      router.pageCallback('mounted', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);\n    }\n  }\n\n  if (options.preload) {\n    // Insert Page\n    insertPage(); // Tab route\n\n    if (options.route.route.tab) {\n      router.tabLoad(options.route.route.tab, extend({}, options, {\n        history: false,\n        browserHistory: false,\n        preload: true\n      }));\n    }\n\n    if (isMaster) {\n      $newPage.removeClass('page-master-stacked').trigger('page:masterunstack');\n      router.emit('pageMasterUnstack', $newPage[0]);\n\n      if (dynamicNavbar) {\n        $(app.navbar.getElByPage($newPage)).removeClass('navbar-master-stacked');\n        router.emit('navbarMasterUnstack', app.navbar.getElByPage($newPage));\n      }\n    } // Page init and before init events\n\n\n    router.pageCallback('init', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);\n\n    if (initialPreload) {\n      router.pageCallback('beforeIn', $newPage, $newNavbarEl, 'current', undefined, options);\n      router.pageCallback('afterIn', $newPage, $newNavbarEl, 'current', undefined, options);\n    }\n\n    const $previousPages = $newPage.prevAll('.page-previous:not(.stacked):not(.page-master)');\n\n    if ($previousPages.length > 0) {\n      $previousPages.each(pageToRemove => {\n        const $pageToRemove = $(pageToRemove);\n        let $navbarToRemove;\n\n        if (dynamicNavbar) {\n          // $navbarToRemove = $newNavbarEl.prevAll('.navbar-previous:not(.stacked)').eq(index);\n          $navbarToRemove = $(app.navbar.getElByPage($pageToRemove));\n        }\n\n        if (router.params.stackPages && router.initialPages.indexOf(pageToRemove) >= 0) {\n          $pageToRemove.addClass('stacked');\n          $pageToRemove.trigger('page:stack');\n          router.emit('pageStack', $pageToRemove[0]);\n\n          if (dynamicNavbar) {\n            $navbarToRemove.addClass('stacked');\n          }\n        } else {\n          router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined);\n          router.removePage($pageToRemove);\n\n          if (dynamicNavbar && $navbarToRemove.length) {\n            router.removeNavbar($navbarToRemove);\n          }\n        }\n      });\n    }\n\n    router.allowPageChange = true;\n    return router;\n  } // History State\n\n\n  if (!(device.ie || device.edge || device.firefox && !device.ios)) {\n    if (router.params.browserHistory && options.browserHistory) {\n      if (options.replaceState) {\n        const browserHistoryRoot = router.params.browserHistoryRoot || '';\n        History.replace(view.id, {\n          url: options.route.url\n        }, browserHistoryRoot + router.params.browserHistorySeparator + options.route.url);\n      } else if (backIndex) {\n        History.go(-backIndex);\n      } else {\n        History.back();\n      }\n    }\n  } // Update History\n\n\n  if (options.replaceState) {\n    router.history[router.history.length - 1] = options.route.url;\n  } else {\n    if (router.history.length === 1) {\n      router.history.unshift(router.url);\n    }\n\n    router.history.pop();\n  }\n\n  router.saveHistory(); // Current Page & Navbar\n\n  router.currentPageEl = $newPage[0];\n\n  if (dynamicNavbar && $newNavbarEl.length) {\n    router.currentNavbarEl = $newNavbarEl[0];\n  } else {\n    delete router.currentNavbarEl;\n  } // Current Route\n\n\n  router.currentRoute = options.route; // History State\n\n  if (device.ie || device.edge || device.firefox && !device.ios) {\n    if (router.params.browserHistory && options.browserHistory) {\n      if (options.replaceState) {\n        const browserHistoryRoot = router.params.browserHistoryRoot || '';\n        History.replace(view.id, {\n          url: options.route.url\n        }, browserHistoryRoot + router.params.browserHistorySeparator + options.route.url);\n      } else if (backIndex) {\n        History.go(-backIndex);\n      } else {\n        History.back();\n      }\n    }\n  } // Insert Page\n\n\n  insertPage(); // Load Tab\n\n  if (options.route.route.tab) {\n    router.tabLoad(options.route.route.tab, extend({}, options, {\n      history: false,\n      browserHistory: false\n    }));\n  } // Check master detail\n\n\n  if (masterDetailEnabled && (currentIsMaster || masterPageRemoved)) {\n    view.checkMasterDetailBreakpoint(false);\n  } // Page init and before init events\n\n\n  router.pageCallback('init', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage); // Before animation callback\n\n  router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', 'next', options);\n  router.pageCallback('beforeIn', $newPage, $newNavbarEl, 'previous', 'current', options); // Animation\n\n  function afterAnimation() {\n    // Set classes\n    router.setPagePosition($newPage, 'current', false);\n    router.setPagePosition($oldPage, 'next', true);\n\n    if (dynamicNavbar) {\n      router.setNavbarPosition($newNavbarEl, 'current', false);\n      router.setNavbarPosition($oldNavbarEl, 'next', true);\n    } // After animation event\n\n\n    router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', 'next', options);\n    router.pageCallback('afterIn', $newPage, $newNavbarEl, 'previous', 'current', options); // Remove Old Page\n\n    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {\n      $oldPage.addClass('stacked');\n      $oldPage.trigger('page:stack');\n      router.emit('pageStack', $oldPage[0]);\n\n      if (dynamicNavbar) {\n        $oldNavbarEl.addClass('stacked');\n      }\n    } else {\n      router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'next', undefined, options);\n      router.removePage($oldPage);\n\n      if (dynamicNavbar && $oldNavbarEl.length) {\n        router.removeNavbar($oldNavbarEl);\n      }\n    }\n\n    router.allowPageChange = true;\n    router.emit('routeChanged', router.currentRoute, router.previousRoute, router); // Preload previous page\n\n    const preloadPreviousPage = router.params.preloadPreviousPage || router.params[`${app.theme}SwipeBack`];\n\n    if (preloadPreviousPage && router.history[router.history.length - 2] && !isMaster) {\n      router.back(router.history[router.history.length - 2], {\n        preload: true\n      });\n    }\n\n    if (router.params.browserHistory) {\n      History.clearRouterQueue();\n    }\n  }\n\n  function setPositionClasses() {\n    router.setPagePosition($oldPage, 'current');\n    router.setPagePosition($newPage, 'previous', false);\n\n    if (dynamicNavbar) {\n      router.setNavbarPosition($oldNavbarEl, 'current');\n      router.setNavbarPosition($newNavbarEl, 'previous', false);\n    }\n  }\n\n  if (options.animate && !(currentIsMaster && app.width >= router.params.masterDetailBreakpoint)) {\n    let transition = router.params.transition;\n\n    if ($oldPage[0] && $oldPage[0].f7PageTransition) {\n      transition = $oldPage[0].f7PageTransition;\n      delete $oldPage[0].f7PageTransition;\n    }\n\n    if (options.transition) transition = options.transition;\n\n    if (!transition && router.previousRoute && router.previousRoute.route) {\n      transition = router.previousRoute.route.transition;\n    }\n\n    if (!transition && router.previousRoute && router.previousRoute.route && router.previousRoute.route.options) {\n      transition = router.previousRoute.route.options.transition;\n    }\n\n    setPositionClasses();\n    router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, 'backward', transition, () => {\n      afterAnimation();\n    });\n  } else {\n    afterAnimation();\n  }\n\n  return router;\n}\n\nfunction loadBack(router, backParams, backOptions, ignorePageChange) {\n  if (!router.allowPageChange && !ignorePageChange) return router;\n  const params = backParams;\n  const options = backOptions;\n  const {\n    url,\n    content,\n    el,\n    pageName,\n    component,\n    componentUrl\n  } = params;\n\n  if (options.route.url && router.url === options.route.url && !(options.reloadCurrent || options.reloadPrevious) && !router.params.allowDuplicateUrls) {\n    return false;\n  }\n\n  if (!options.route && url) {\n    options.route = router.parseRouteUrl(url);\n  } // Component Callbacks\n\n\n  function resolve(pageEl, newOptions) {\n    return backward(router, pageEl, extend(options, newOptions));\n  }\n\n  function reject() {\n    router.allowPageChange = true;\n    return router;\n  }\n\n  if (url || componentUrl || component) {\n    router.allowPageChange = false;\n  } // Proceed\n\n\n  if (content) {\n    backward(router, router.getPageEl(content), options);\n  } else if (el) {\n    // Load page from specified HTMLElement or by page name in pages container\n    backward(router, router.getPageEl(el), options);\n  } else if (pageName) {\n    // Load page by page name in pages container\n    backward(router, router.$el.children(`.page[data-name=\"${pageName}\"]`).eq(0), options);\n  } else if (component || componentUrl) {\n    // Load from component (F7/Vue/React/...)\n    try {\n      router.pageComponentLoader({\n        routerEl: router.el,\n        component,\n        componentUrl,\n        options,\n        resolve,\n        reject\n      });\n    } catch (err) {\n      router.allowPageChange = true;\n      throw err;\n    }\n  } else if (url) {\n    // Load using XHR\n    if (router.xhrAbortController) {\n      router.xhrAbortController.abort();\n      router.xhrAbortController = false;\n    }\n\n    router.xhrRequest(url, options).then(pageContent => {\n      backward(router, router.getPageEl(pageContent), options);\n    }).catch(() => {\n      router.allowPageChange = true;\n    });\n  }\n\n  return router;\n}\n\nfunction back() {\n  const router = this;\n  const device = getDevice();\n  if (router.swipeBackActive) return router;\n  let navigateUrl;\n  let navigateOptions;\n  let route;\n\n  if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'object') {\n    navigateOptions = (arguments.length <= 0 ? undefined : arguments[0]) || {};\n  } else {\n    navigateUrl = arguments.length <= 0 ? undefined : arguments[0];\n    navigateOptions = (arguments.length <= 1 ? undefined : arguments[1]) || {};\n  }\n\n  const {\n    name,\n    params,\n    query\n  } = navigateOptions;\n\n  if (name) {\n    navigateUrl = router.generateUrl({\n      name,\n      params,\n      query\n    });\n\n    if (navigateUrl) {\n      return router.back(navigateUrl, extend({}, navigateOptions, {\n        name: null,\n        params: null,\n        query: null\n      }));\n    }\n\n    return router;\n  }\n\n  const app = router.app;\n  appRouterCheck(router, 'back');\n  let currentRouteIsModal = router.currentRoute.modal;\n  let modalType;\n\n  if (!currentRouteIsModal) {\n    'popup popover sheet loginScreen actions customModal panel'.split(' ').forEach(modalLoadProp => {\n      if (router.currentRoute.route[modalLoadProp]) {\n        currentRouteIsModal = true;\n        modalType = modalLoadProp;\n      }\n    });\n  }\n\n  if (currentRouteIsModal && !navigateOptions.preload) {\n    const modalToClose = router.currentRoute.modal || router.currentRoute.route.modalInstance || app[modalType].get();\n    const previousUrl = router.history[router.history.length - 2];\n    let previousRoute; // check if previous route is modal too\n\n    if (modalToClose && modalToClose.$el) {\n      const prevOpenedModals = modalToClose.$el.prevAll('.modal-in');\n\n      if (prevOpenedModals.length && prevOpenedModals[0].f7Modal) {\n        const modalEl = prevOpenedModals[0]; // check if current router not inside of the modalEl\n\n        if (!router.$el.parents(modalEl).length) {\n          previousRoute = modalEl.f7Modal.route;\n        }\n      }\n    }\n\n    if (!previousRoute) {\n      previousRoute = router.findMatchingRoute(previousUrl);\n    }\n\n    if (!previousRoute && previousUrl) {\n      previousRoute = {\n        url: previousUrl,\n        path: previousUrl.split('?')[0],\n        query: parseUrlQuery(previousUrl),\n        route: {\n          path: previousUrl.split('?')[0],\n          url: previousUrl\n        }\n      };\n    }\n\n    if (!navigateUrl || navigateUrl.replace(/[# ]/g, '').trim().length === 0) {\n      if (!previousRoute || !modalToClose) {\n        return router;\n      }\n    }\n\n    const forceOtherUrl = navigateOptions.force && previousRoute && navigateUrl;\n\n    if (previousRoute && modalToClose) {\n      const isBrokenBrowserHistory = device.ie || device.edge || device.firefox && !device.ios;\n      const needHistoryBack = router.params.browserHistory && navigateOptions.browserHistory !== false;\n      const currentRouteWithoutBrowserHistory = router.currentRoute && router.currentRoute.route && router.currentRoute.route.options && router.currentRoute.route.options.browserHistory === false;\n\n      if (needHistoryBack && !isBrokenBrowserHistory && !currentRouteWithoutBrowserHistory) {\n        History.back();\n      }\n\n      router.currentRoute = previousRoute;\n      router.history.pop();\n      router.saveHistory();\n\n      if (needHistoryBack && isBrokenBrowserHistory && !currentRouteWithoutBrowserHistory) {\n        History.back();\n      }\n\n      router.modalRemove(modalToClose);\n\n      if (forceOtherUrl) {\n        router.navigate(navigateUrl, {\n          reloadCurrent: true\n        });\n      }\n    } else if (modalToClose) {\n      router.modalRemove(modalToClose);\n\n      if (navigateUrl) {\n        router.navigate(navigateUrl, {\n          reloadCurrent: true\n        });\n      }\n    }\n\n    return router;\n  }\n\n  let $previousPage = router.$el.children('.page-current').prevAll('.page-previous:not(.page-master)').eq(0);\n  let skipMaster;\n\n  if (router.params.masterDetailBreakpoint > 0) {\n    const classes = [];\n    router.$el.children('.page').each(pageEl => {\n      classes.push(pageEl.className);\n    });\n    const $previousMaster = router.$el.children('.page-current').prevAll('.page-master').eq(0);\n\n    if ($previousMaster.length) {\n      const expectedPreviousPageUrl = router.history[router.history.length - 2];\n      const expectedPreviousPageRoute = router.findMatchingRoute(expectedPreviousPageUrl);\n\n      if (expectedPreviousPageRoute && $previousMaster[0].f7Page && expectedPreviousPageRoute.route === $previousMaster[0].f7Page.route.route) {\n        $previousPage = $previousMaster;\n\n        if (!navigateOptions.preload) {\n          skipMaster = app.width >= router.params.masterDetailBreakpoint;\n        }\n      }\n    }\n  }\n\n  if (!navigateOptions.force && $previousPage.length && !skipMaster) {\n    if (router.params.browserHistory && $previousPage[0].f7Page && router.history[router.history.length - 2] !== $previousPage[0].f7Page.route.url) {\n      router.back(router.history[router.history.length - 2], extend(navigateOptions, {\n        force: true\n      }));\n      return router;\n    }\n\n    const previousPageRoute = $previousPage[0].f7Page.route;\n\n    if (navigateOptions.preload && $previousPage.hasClass('stacked')) {\n      loadBack(router, {\n        el: $previousPage\n      }, extend(navigateOptions, {\n        route: previousPageRoute\n      }));\n      return router;\n    }\n\n    processRouteQueue.call(router, previousPageRoute, router.currentRoute, () => {\n      loadBack(router, {\n        el: $previousPage\n      }, extend(navigateOptions, {\n        route: previousPageRoute\n      }));\n    }, () => {}, 'backward');\n    return router;\n  } // Navigate URL\n\n\n  if (navigateUrl === '#') {\n    navigateUrl = undefined;\n  }\n\n  if (navigateUrl && navigateUrl[0] !== '/' && navigateUrl.indexOf('#') !== 0) {\n    navigateUrl = ((router.path || '/') + navigateUrl).replace('//', '/');\n  }\n\n  if (!navigateUrl && router.history.length > 1) {\n    navigateUrl = router.history[router.history.length - 2];\n  }\n\n  if (skipMaster && !navigateOptions.force && router.history[router.history.length - 3]) {\n    return router.back(router.history[router.history.length - 3], extend({}, navigateOptions || {}, {\n      force: true,\n      animate: false\n    }));\n  }\n\n  if (skipMaster && !navigateOptions.force) {\n    return router;\n  } // Find route to load\n\n\n  route = router.findMatchingRoute(navigateUrl);\n\n  if (!route) {\n    if (navigateUrl) {\n      route = {\n        url: navigateUrl,\n        path: navigateUrl.split('?')[0],\n        query: parseUrlQuery(navigateUrl),\n        route: {\n          path: navigateUrl.split('?')[0],\n          url: navigateUrl\n        }\n      };\n    }\n  }\n\n  if (!route) {\n    return router;\n  }\n\n  if (route.route.redirect) {\n    return redirect.call(router, 'backward', route, navigateOptions);\n  }\n\n  const options = {};\n\n  if (route.route.options) {\n    extend(options, route.route.options, navigateOptions);\n  } else {\n    extend(options, navigateOptions);\n  }\n\n  options.route = route;\n  let backForceLoaded;\n\n  if (options.force && router.params.stackPages) {\n    router.$el.children('.page-previous.stacked').each(pageEl => {\n      if (pageEl.f7Page && pageEl.f7Page.route && pageEl.f7Page.route.url === route.url) {\n        backForceLoaded = true;\n        loadBack(router, {\n          el: pageEl\n        }, options);\n      }\n    });\n\n    if (backForceLoaded) {\n      return router;\n    }\n  }\n\n  function resolve() {\n    let routerLoaded = false;\n\n    if (route.route.keepAlive && route.route.keepAliveData) {\n      loadBack(router, {\n        el: route.route.keepAliveData.pageEl\n      }, options);\n      routerLoaded = true;\n    }\n\n    'url content component pageName el componentUrl'.split(' ').forEach(pageLoadProp => {\n      if (route.route[pageLoadProp] && !routerLoaded) {\n        routerLoaded = true;\n        loadBack(router, {\n          [pageLoadProp]: route.route[pageLoadProp]\n        }, options);\n      }\n    });\n    if (routerLoaded) return; // Async\n\n    function asyncResolve(resolveParams, resolveOptions) {\n      router.allowPageChange = false;\n      loadBack(router, resolveParams, extend(options, resolveOptions), true);\n    }\n\n    function asyncReject() {\n      router.allowPageChange = true;\n    }\n\n    if (route.route.async) {\n      router.allowPageChange = false;\n      route.route.async.call(router, {\n        router,\n        to: route,\n        from: router.currentRoute,\n        resolve: asyncResolve,\n        reject: asyncReject,\n        direction: 'backward',\n        app\n      });\n    }\n\n    if (route.route.asyncComponent) {\n      asyncComponent(router, route.route.asyncComponent, asyncResolve, asyncReject);\n    }\n  }\n\n  function reject() {\n    router.allowPageChange = true;\n  }\n\n  if (options.preload) {\n    resolve();\n  } else {\n    processRouteQueue.call(router, route, router.currentRoute, () => {\n      if (route.route.modules) {\n        app.loadModules(Array.isArray(route.route.modules) ? route.route.modules : [route.route.modules]).then(() => {\n          resolve();\n        }).catch(() => {\n          reject();\n        });\n      } else {\n        resolve();\n      }\n    }, () => {\n      reject();\n    }, 'backward');\n  } // Return Router\n\n\n  return router;\n}\n\nexport { back };"],"mappings":"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"},"metadata":{},"sourceType":"module"}