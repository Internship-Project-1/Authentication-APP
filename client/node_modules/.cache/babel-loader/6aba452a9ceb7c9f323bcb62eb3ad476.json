{"ast":null,"code":"import { extend } from '../../shared/utils.js';\nexport default function redirect(direction, route, options) {\n  const router = this;\n  const r = route.route.redirect;\n  const method = direction === 'forward' ? 'navigate' : 'back';\n\n  if (options.initial && router.params.browserHistory) {\n    options.replaceState = true; // eslint-disable-line\n\n    options.history = true; // eslint-disable-line\n  }\n\n  function redirectResolve(redirectUrl, redirectOptions) {\n    if (redirectOptions === void 0) {\n      redirectOptions = {};\n    }\n\n    router.allowPageChange = true;\n    router[method](redirectUrl, extend({}, options, redirectOptions));\n  }\n\n  function redirectReject() {\n    router.allowPageChange = true;\n  }\n\n  if (typeof r === 'function') {\n    router.allowPageChange = false;\n    const redirectUrl = r.call(router, {\n      router,\n      to: route,\n      resolve: redirectResolve,\n      reject: redirectReject,\n      direction,\n      app: router.app\n    });\n\n    if (redirectUrl && typeof redirectUrl === 'string') {\n      router.allowPageChange = true;\n      return router[method](redirectUrl, options);\n    }\n\n    return router;\n  }\n\n  return router[method](r, options);\n}","map":{"version":3,"names":["extend","redirect","direction","route","options","router","r","method","initial","params","browserHistory","replaceState","history","redirectResolve","redirectUrl","redirectOptions","allowPageChange","redirectReject","call","to","resolve","reject","app"],"sources":["C:/Users/Babak/userlogin/node_modules/framework7/modules/router/redirect.js"],"sourcesContent":["import { extend } from '../../shared/utils.js';\nexport default function redirect(direction, route, options) {\n  const router = this;\n  const r = route.route.redirect;\n  const method = direction === 'forward' ? 'navigate' : 'back';\n\n  if (options.initial && router.params.browserHistory) {\n    options.replaceState = true; // eslint-disable-line\n\n    options.history = true; // eslint-disable-line\n  }\n\n  function redirectResolve(redirectUrl, redirectOptions) {\n    if (redirectOptions === void 0) {\n      redirectOptions = {};\n    }\n\n    router.allowPageChange = true;\n    router[method](redirectUrl, extend({}, options, redirectOptions));\n  }\n\n  function redirectReject() {\n    router.allowPageChange = true;\n  }\n\n  if (typeof r === 'function') {\n    router.allowPageChange = false;\n    const redirectUrl = r.call(router, {\n      router,\n      to: route,\n      resolve: redirectResolve,\n      reject: redirectReject,\n      direction,\n      app: router.app\n    });\n\n    if (redirectUrl && typeof redirectUrl === 'string') {\n      router.allowPageChange = true;\n      return router[method](redirectUrl, options);\n    }\n\n    return router;\n  }\n\n  return router[method](r, options);\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,eAAe,SAASC,QAAT,CAAkBC,SAAlB,EAA6BC,KAA7B,EAAoCC,OAApC,EAA6C;EAC1D,MAAMC,MAAM,GAAG,IAAf;EACA,MAAMC,CAAC,GAAGH,KAAK,CAACA,KAAN,CAAYF,QAAtB;EACA,MAAMM,MAAM,GAAGL,SAAS,KAAK,SAAd,GAA0B,UAA1B,GAAuC,MAAtD;;EAEA,IAAIE,OAAO,CAACI,OAAR,IAAmBH,MAAM,CAACI,MAAP,CAAcC,cAArC,EAAqD;IACnDN,OAAO,CAACO,YAAR,GAAuB,IAAvB,CADmD,CACtB;;IAE7BP,OAAO,CAACQ,OAAR,GAAkB,IAAlB,CAHmD,CAG3B;EACzB;;EAED,SAASC,eAAT,CAAyBC,WAAzB,EAAsCC,eAAtC,EAAuD;IACrD,IAAIA,eAAe,KAAK,KAAK,CAA7B,EAAgC;MAC9BA,eAAe,GAAG,EAAlB;IACD;;IAEDV,MAAM,CAACW,eAAP,GAAyB,IAAzB;IACAX,MAAM,CAACE,MAAD,CAAN,CAAeO,WAAf,EAA4Bd,MAAM,CAAC,EAAD,EAAKI,OAAL,EAAcW,eAAd,CAAlC;EACD;;EAED,SAASE,cAAT,GAA0B;IACxBZ,MAAM,CAACW,eAAP,GAAyB,IAAzB;EACD;;EAED,IAAI,OAAOV,CAAP,KAAa,UAAjB,EAA6B;IAC3BD,MAAM,CAACW,eAAP,GAAyB,KAAzB;IACA,MAAMF,WAAW,GAAGR,CAAC,CAACY,IAAF,CAAOb,MAAP,EAAe;MACjCA,MADiC;MAEjCc,EAAE,EAAEhB,KAF6B;MAGjCiB,OAAO,EAAEP,eAHwB;MAIjCQ,MAAM,EAAEJ,cAJyB;MAKjCf,SALiC;MAMjCoB,GAAG,EAAEjB,MAAM,CAACiB;IANqB,CAAf,CAApB;;IASA,IAAIR,WAAW,IAAI,OAAOA,WAAP,KAAuB,QAA1C,EAAoD;MAClDT,MAAM,CAACW,eAAP,GAAyB,IAAzB;MACA,OAAOX,MAAM,CAACE,MAAD,CAAN,CAAeO,WAAf,EAA4BV,OAA5B,CAAP;IACD;;IAED,OAAOC,MAAP;EACD;;EAED,OAAOA,MAAM,CAACE,MAAD,CAAN,CAAeD,CAAf,EAAkBF,OAAlB,CAAP;AACD"},"metadata":{},"sourceType":"module"}