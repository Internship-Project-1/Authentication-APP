{"ast":null,"code":"import { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom7.js';\nimport { extend, parseUrlQuery } from '../../shared/utils.js';\nimport History from '../../shared/history.js';\nimport redirect from './redirect.js';\nimport processRouteQueue from './process-route-queue.js';\nimport appRouterCheck from './app-router-check.js';\nimport asyncComponent from './async-component.js';\n\nfunction refreshPage() {\n  const router = this;\n  appRouterCheck(router, 'refreshPage');\n  return router.navigate(router.currentRoute.url, {\n    ignoreCache: true,\n    reloadCurrent: true\n  });\n}\n\nfunction forward(router, el, forwardOptions) {\n  if (forwardOptions === void 0) {\n    forwardOptions = {};\n  }\n\n  const document = getDocument();\n  const $el = $(el);\n  const app = router.app;\n  const view = router.view;\n  const options = extend(false, {\n    animate: router.params.animate,\n    browserHistory: true,\n    replaceState: false,\n    history: true,\n    reloadCurrent: router.params.reloadPages,\n    reloadPrevious: false,\n    reloadAll: false,\n    clearPreviousHistory: false,\n    reloadDetail: router.params.reloadDetail,\n    on: {}\n  }, forwardOptions);\n  const masterDetailEnabled = router.params.masterDetailBreakpoint > 0;\n  const isMaster = masterDetailEnabled && options.route && options.route.route && (options.route.route.master === true || typeof options.route.route.master === 'function' && options.route.route.master(app, router));\n  let masterPageEl;\n  let otherDetailPageEl;\n  let detailsInBetweenRemoved = 0;\n  let currentRouteIsModal = router.currentRoute.modal;\n  let modalType;\n\n  if (!currentRouteIsModal) {\n    'popup popover sheet loginScreen actions customModal panel'.split(' ').forEach(modalLoadProp => {\n      if (router.currentRoute && router.currentRoute.route && router.currentRoute.route[modalLoadProp]) {\n        currentRouteIsModal = true;\n        modalType = modalLoadProp;\n      }\n    });\n  }\n\n  if (currentRouteIsModal) {\n    const modalToClose = router.currentRoute.modal || router.currentRoute.route.modalInstance || app[modalType].get();\n    const previousUrl = router.history[router.history.length - 2];\n    let previousRoute = router.findMatchingRoute(previousUrl);\n\n    if (!previousRoute && previousUrl) {\n      previousRoute = {\n        url: previousUrl,\n        path: previousUrl.split('?')[0],\n        query: parseUrlQuery(previousUrl),\n        route: {\n          path: previousUrl.split('?')[0],\n          url: previousUrl\n        }\n      };\n    }\n\n    router.modalRemove(modalToClose);\n  }\n\n  const dynamicNavbar = router.dynamicNavbar;\n  const $viewEl = router.$el;\n  const $newPage = $el;\n  const reload = options.reloadPrevious || options.reloadCurrent || options.reloadAll;\n  let $oldPage;\n  let $navbarsEl;\n  let $newNavbarEl;\n  let $oldNavbarEl;\n  router.allowPageChange = false;\n\n  if ($newPage.length === 0) {\n    router.allowPageChange = true;\n    return router;\n  }\n\n  if ($newPage.length) {\n    // Remove theme elements\n    router.removeThemeElements($newPage);\n  }\n\n  if (dynamicNavbar) {\n    $newNavbarEl = $newPage.children('.navbar');\n    $navbarsEl = router.$navbarsEl;\n\n    if ($newNavbarEl.length === 0 && $newPage[0] && $newPage[0].f7Page) {\n      // Try from pageData\n      $newNavbarEl = $newPage[0].f7Page.$navbarEl;\n    }\n  } // Save Keep Alive Cache\n\n\n  if (options.route && options.route.route && options.route.route.keepAlive && !options.route.route.keepAliveData) {\n    options.route.route.keepAliveData = {\n      pageEl: $el[0]\n    };\n  } // Pages In View\n\n\n  const $pagesInView = $viewEl.children('.page:not(.stacked)').filter(pageInView => pageInView !== $newPage[0]); // Navbars In View\n\n  let $navbarsInView;\n\n  if (dynamicNavbar) {\n    $navbarsInView = $navbarsEl.children('.navbar:not(.stacked)').filter(navbarInView => navbarInView !== $newNavbarEl[0]);\n  } // Exit when reload previous and only 1 page in view so nothing ro reload\n\n\n  if (options.reloadPrevious && $pagesInView.length < 2) {\n    router.allowPageChange = true;\n    return router;\n  } // Find Detail' master page\n\n\n  let isDetail;\n  let reloadDetail;\n  let isDetailRoot;\n\n  if (masterDetailEnabled && !options.reloadAll) {\n    for (let i = 0; i < $pagesInView.length; i += 1) {\n      if (!masterPageEl && $pagesInView[i].classList.contains('page-master')) {\n        masterPageEl = $pagesInView[i];\n        continue; // eslint-disable-line\n      }\n    }\n\n    isDetail = !isMaster && masterPageEl;\n\n    if (isDetail) {\n      // Find Other Detail\n      if (masterPageEl) {\n        for (let i = 0; i < $pagesInView.length; i += 1) {\n          if ($pagesInView[i].classList.contains('page-master-detail')) {\n            otherDetailPageEl = $pagesInView[i];\n            continue; // eslint-disable-line\n          }\n        }\n      }\n    }\n\n    reloadDetail = isDetail && options.reloadDetail && app.width >= router.params.masterDetailBreakpoint && masterPageEl;\n  }\n\n  if (isDetail) {\n    isDetailRoot = !otherDetailPageEl || reloadDetail || options.reloadAll || options.reloadCurrent;\n  } // New Page\n\n\n  let newPagePosition = 'next';\n\n  if (options.reloadCurrent || options.reloadAll || reloadDetail) {\n    newPagePosition = 'current';\n  } else if (options.reloadPrevious) {\n    newPagePosition = 'previous';\n  }\n\n  $newPage.removeClass('page-previous page-current page-next').addClass(`page-${newPagePosition}${isMaster ? ' page-master' : ''}${isDetail ? ' page-master-detail' : ''}${isDetailRoot ? ' page-master-detail-root' : ''}`).removeClass('stacked').trigger('page:unstack').trigger('page:position', {\n    position: newPagePosition\n  });\n  router.emit('pageUnstack', $newPage[0]);\n  router.emit('pagePosition', $newPage[0], newPagePosition);\n\n  if (isMaster || isDetail) {\n    $newPage.trigger('page:role', {\n      role: isMaster ? 'master' : 'detail',\n      root: !!isDetailRoot\n    });\n    router.emit('pageRole', $newPage[0], {\n      role: isMaster ? 'master' : 'detail',\n      detailRoot: !!isDetailRoot\n    });\n  }\n\n  if (dynamicNavbar && $newNavbarEl.length) {\n    $newNavbarEl.removeClass('navbar-previous navbar-current navbar-next').addClass(`navbar-${newPagePosition}${isMaster ? ' navbar-master' : ''}${isDetail ? ' navbar-master-detail' : ''}${isDetailRoot ? ' navbar-master-detail-root' : ''}`).removeClass('stacked');\n    $newNavbarEl.trigger('navbar:position', {\n      position: newPagePosition\n    });\n    router.emit('navbarPosition', $newNavbarEl[0], newPagePosition);\n\n    if (isMaster || isDetail) {\n      router.emit('navbarRole', $newNavbarEl[0], {\n        role: isMaster ? 'master' : 'detail',\n        detailRoot: !!isDetailRoot\n      });\n    }\n  } // Find Old Page\n\n\n  if (options.reloadCurrent || reloadDetail) {\n    if (reloadDetail) {\n      $oldPage = $pagesInView.filter(pageEl => !pageEl.classList.contains('page-master'));\n\n      if (dynamicNavbar) {\n        $oldNavbarEl = $($oldPage.map(pageEl => app.navbar.getElByPage(pageEl)));\n      }\n\n      if ($oldPage.length > 1 && masterPageEl) {\n        detailsInBetweenRemoved = $oldPage.length - 1;\n        $(masterPageEl).removeClass('page-master-stacked').trigger('page:masterunstack');\n        router.emit('pageMasterUnstack', masterPageEl);\n\n        if (dynamicNavbar) {\n          $(app.navbar.getElByPage(masterPageEl)).removeClass('navbar-master-stacked');\n          router.emit('navbarMasterUnstack', app.navbar.getElByPage(masterPageEl));\n        }\n      }\n    } else {\n      $oldPage = $pagesInView.eq($pagesInView.length - 1);\n\n      if (dynamicNavbar) {\n        $oldNavbarEl = $(app.navbar.getElByPage($oldPage));\n      }\n    }\n  } else if (options.reloadPrevious) {\n    $oldPage = $pagesInView.eq($pagesInView.length - 2);\n\n    if (dynamicNavbar) {\n      // $oldNavbarEl = $navbarsInView.eq($pagesInView.length - 2);\n      $oldNavbarEl = $(app.navbar.getElByPage($oldPage));\n    }\n  } else if (options.reloadAll) {\n    $oldPage = $pagesInView.filter(pageEl => pageEl !== $newPage[0]);\n\n    if (dynamicNavbar) {\n      $oldNavbarEl = $navbarsInView.filter(navbarEl => navbarEl !== $newNavbarEl[0]);\n    }\n  } else {\n    let removedPageEls = [];\n    let removedNavbarEls = [];\n\n    if ($pagesInView.length > 1) {\n      let i = 0;\n\n      for (i = 0; i < $pagesInView.length - 1; i += 1) {\n        if (masterPageEl && $pagesInView[i] === masterPageEl) {\n          $pagesInView.eq(i).addClass('page-master-stacked');\n          $pagesInView.eq(i).trigger('page:masterstack');\n          router.emit('pageMasterStack', $pagesInView[i]);\n\n          if (dynamicNavbar) {\n            $(app.navbar.getElByPage(masterPageEl)).addClass('navbar-master-stacked');\n            router.emit('navbarMasterStack', app.navbar.getElByPage(masterPageEl));\n          }\n\n          continue; // eslint-disable-line\n        }\n\n        const oldNavbarEl = app.navbar.getElByPage($pagesInView.eq(i));\n\n        if (router.params.stackPages) {\n          $pagesInView.eq(i).addClass('stacked');\n          $pagesInView.eq(i).trigger('page:stack');\n          router.emit('pageStack', $pagesInView[i]);\n\n          if (dynamicNavbar) {\n            $(oldNavbarEl).addClass('stacked');\n          }\n        } else {\n          // Page remove event\n          removedPageEls.push($pagesInView[i]);\n          router.pageCallback('beforeRemove', $pagesInView[i], $navbarsInView && $navbarsInView[i], 'previous', undefined, options);\n          router.removePage($pagesInView[i]);\n\n          if (dynamicNavbar && oldNavbarEl) {\n            removedNavbarEls.push(oldNavbarEl);\n            router.removeNavbar(oldNavbarEl);\n          }\n        }\n      }\n    }\n\n    $oldPage = $viewEl.children('.page:not(.stacked)').filter(pageEl => pageEl !== $newPage[0] && removedPageEls.indexOf(pageEl) < 0);\n\n    if (dynamicNavbar) {\n      $oldNavbarEl = $navbarsEl.children('.navbar:not(.stacked)').filter(navbarEl => navbarEl !== $newNavbarEl[0] && removedNavbarEls.indexOf(removedNavbarEls) < 0);\n    }\n\n    removedPageEls = [];\n    removedNavbarEls = [];\n  }\n\n  if (isDetail && !options.reloadAll) {\n    if ($oldPage.length > 1 || reloadDetail) {\n      $oldPage = $oldPage.filter(pageEl => !pageEl.classList.contains('page-master'));\n    }\n\n    if ($oldNavbarEl && ($oldNavbarEl.length > 1 || reloadDetail)) {\n      $oldNavbarEl = $oldNavbarEl.filter(navbarEl => !navbarEl.classList.contains('navbar-master'));\n    }\n  } // Push State\n\n\n  if (router.params.browserHistory && (options.browserHistory || options.replaceState) && !options.reloadPrevious) {\n    const browserHistoryRoot = router.params.browserHistoryRoot || '';\n    History[options.reloadCurrent || reloadDetail && otherDetailPageEl || options.reloadAll || options.replaceState ? 'replace' : 'push'](view.id, {\n      url: options.route.url\n    }, browserHistoryRoot + router.params.browserHistorySeparator + options.route.url);\n  }\n\n  if (!options.reloadPrevious) {\n    // Current Page & Navbar\n    router.currentPageEl = $newPage[0];\n\n    if (dynamicNavbar && $newNavbarEl.length) {\n      router.currentNavbarEl = $newNavbarEl[0];\n    } else {\n      delete router.currentNavbarEl;\n    } // Current Route\n\n\n    router.currentRoute = options.route;\n  } // Update router history\n\n\n  const url = options.route.url;\n\n  if (options.history) {\n    if (((options.reloadCurrent || reloadDetail && otherDetailPageEl) && router.history.length) > 0 || options.replaceState) {\n      if (reloadDetail && detailsInBetweenRemoved > 0) {\n        router.history = router.history.slice(0, router.history.length - detailsInBetweenRemoved);\n      }\n\n      router.history[router.history.length - (options.reloadPrevious ? 2 : 1)] = url;\n    } else if (options.reloadPrevious) {\n      router.history[router.history.length - 2] = url;\n    } else if (options.reloadAll) {\n      router.history = [url];\n    } else {\n      router.history.push(url);\n    }\n  }\n\n  router.saveHistory(); // Insert new page and navbar\n\n  const newPageInDom = $newPage.parents(document).length > 0;\n  const f7Component = $newPage[0].f7Component;\n\n  if (options.reloadPrevious) {\n    if (f7Component && !newPageInDom) {\n      f7Component.mount(componentEl => {\n        $(componentEl).insertBefore($oldPage);\n      });\n    } else {\n      $newPage.insertBefore($oldPage);\n    }\n\n    if (dynamicNavbar && $newNavbarEl.length) {\n      if ($newNavbarEl.find('.title-large').length) {\n        $newNavbarEl.addClass('navbar-large');\n      }\n\n      if ($oldNavbarEl.length) {\n        $newNavbarEl.insertBefore($oldNavbarEl);\n      } else {\n        if (!router.$navbarsEl.parents(document).length) {\n          router.$el.prepend(router.$navbarsEl);\n        }\n\n        $navbarsEl.append($newNavbarEl);\n      }\n    }\n  } else {\n    if ($oldPage.next('.page')[0] !== $newPage[0]) {\n      if (f7Component && !newPageInDom) {\n        f7Component.mount(componentEl => {\n          $viewEl.append(componentEl);\n        });\n      } else {\n        $viewEl.append($newPage[0]);\n      }\n    }\n\n    if (dynamicNavbar && $newNavbarEl.length) {\n      if ($newNavbarEl.find('.title-large').length) {\n        $newNavbarEl.addClass('navbar-large');\n      }\n\n      if (!router.$navbarsEl.parents(document).length) {\n        router.$el.prepend(router.$navbarsEl);\n      }\n\n      $navbarsEl.append($newNavbarEl[0]);\n    }\n  }\n\n  if (!newPageInDom) {\n    router.pageCallback('mounted', $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : 'current', options, $oldPage);\n  } else if (options.route && options.route.route && options.route.route.keepAlive && !$newPage[0].f7PageMounted) {\n    $newPage[0].f7PageMounted = true;\n    router.pageCallback('mounted', $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : 'current', options, $oldPage);\n  } // Remove old page\n\n\n  if ((options.reloadCurrent || reloadDetail) && $oldPage.length > 0) {\n    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {\n      $oldPage.addClass('stacked');\n      $oldPage.trigger('page:stack');\n      router.emit('pageStack', $oldPage[0]);\n\n      if (dynamicNavbar) {\n        $oldNavbarEl.addClass('stacked');\n      }\n    } else {\n      // Page remove event\n      router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', undefined, options);\n      router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', undefined, options);\n      router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'current', undefined, options);\n      router.removePage($oldPage);\n\n      if (dynamicNavbar && $oldNavbarEl && $oldNavbarEl.length) {\n        router.removeNavbar($oldNavbarEl);\n      }\n    }\n  } else if (options.reloadAll) {\n    $oldPage.each((pageEl, index) => {\n      const $oldPageEl = $(pageEl);\n      const $oldNavbarElEl = $(app.navbar.getElByPage($oldPageEl));\n\n      if (router.params.stackPages && router.initialPages.indexOf($oldPageEl[0]) >= 0) {\n        $oldPageEl.addClass('stacked');\n        $oldPageEl.trigger('page:stack');\n        router.emit('pageStack', $oldPageEl[0]);\n\n        if (dynamicNavbar) {\n          $oldNavbarElEl.addClass('stacked');\n        }\n      } else {\n        // Page remove event\n        if ($oldPageEl.hasClass('page-current')) {\n          router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', undefined, options);\n          router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', undefined, options);\n        }\n\n        router.pageCallback('beforeRemove', $oldPageEl, $oldNavbarEl && $oldNavbarEl.eq(index), 'previous', undefined, options);\n        router.removePage($oldPageEl);\n\n        if (dynamicNavbar && $oldNavbarElEl.length) {\n          router.removeNavbar($oldNavbarElEl);\n        }\n      }\n    });\n  } else if (options.reloadPrevious) {\n    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {\n      $oldPage.addClass('stacked');\n      $oldPage.trigger('page:stack');\n      router.emit('pageStack', $oldPage[0]);\n\n      if (dynamicNavbar) {\n        $oldNavbarEl.addClass('stacked');\n      }\n    } else {\n      // Page remove event\n      router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'previous', undefined, options);\n      router.removePage($oldPage);\n\n      if (dynamicNavbar && $oldNavbarEl && $oldNavbarEl.length) {\n        router.removeNavbar($oldNavbarEl);\n      }\n    }\n  } // Load Tab\n\n\n  if (options.route.route.tab) {\n    router.tabLoad(options.route.route.tab, extend({}, options, {\n      history: false,\n      browserHistory: false\n    }));\n  } // Check master detail\n\n\n  if (masterDetailEnabled) {\n    view.checkMasterDetailBreakpoint();\n  } // Page init and before init events\n\n\n  router.pageCallback('init', $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : 'current', options, $oldPage);\n\n  if (options.reloadCurrent || options.reloadAll || reloadDetail) {\n    router.allowPageChange = true;\n    router.pageCallback('beforeIn', $newPage, $newNavbarEl, newPagePosition, 'current', options);\n    $newPage.removeAttr('aria-hidden');\n\n    if (dynamicNavbar && $newNavbarEl) {\n      $newNavbarEl.removeAttr('aria-hidden');\n    }\n\n    router.pageCallback('afterIn', $newPage, $newNavbarEl, newPagePosition, 'current', options);\n    if (options.reloadCurrent && options.clearPreviousHistory) router.clearPreviousHistory();\n\n    if (reloadDetail) {\n      router.setPagePosition($(masterPageEl), 'previous');\n\n      if (masterPageEl.f7Page && masterPageEl.f7Page.navbarEl) {\n        router.setNavbarPosition($(masterPageEl.f7Page.navbarEl), 'previous');\n      }\n    }\n\n    return router;\n  }\n\n  if (options.reloadPrevious) {\n    router.allowPageChange = true;\n    return router;\n  } // Before animation event\n\n\n  router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', 'previous', options);\n  router.pageCallback('beforeIn', $newPage, $newNavbarEl, 'next', 'current', options); // Animation\n\n  function afterAnimation() {\n    router.setPagePosition($newPage, 'current', false);\n    router.setPagePosition($oldPage, 'previous', !$oldPage.hasClass('page-master'));\n\n    if (dynamicNavbar) {\n      router.setNavbarPosition($newNavbarEl, 'current', false);\n      router.setNavbarPosition($oldNavbarEl, 'previous', !$oldNavbarEl.hasClass('navbar-master'));\n    } // After animation event\n\n\n    router.allowPageChange = true;\n    router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', 'previous', options);\n    router.pageCallback('afterIn', $newPage, $newNavbarEl, 'next', 'current', options);\n    let keepOldPage = (router.params.preloadPreviousPage || router.params[`${app.theme}SwipeBack`]) && !isMaster;\n\n    if (!keepOldPage) {\n      if ($newPage.hasClass('smart-select-page') || $newPage.hasClass('photo-browser-page') || $newPage.hasClass('autocomplete-page') || $newPage.hasClass('color-picker-page')) {\n        keepOldPage = true;\n      }\n    }\n\n    if (!keepOldPage) {\n      if (router.params.stackPages) {\n        $oldPage.addClass('stacked');\n        $oldPage.trigger('page:stack');\n        router.emit('pageStack', $oldPage[0]);\n\n        if (dynamicNavbar) {\n          $oldNavbarEl.addClass('stacked');\n        }\n      } else if (!($newPage.attr('data-name') && $newPage.attr('data-name') === 'smart-select-page')) {\n        // Remove event\n        router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'previous', undefined, options);\n        router.removePage($oldPage);\n\n        if (dynamicNavbar && $oldNavbarEl.length) {\n          router.removeNavbar($oldNavbarEl);\n        }\n      }\n    }\n\n    if (options.clearPreviousHistory) router.clearPreviousHistory();\n    router.emit('routeChanged', router.currentRoute, router.previousRoute, router);\n\n    if (router.params.browserHistory) {\n      History.clearRouterQueue();\n    }\n  }\n\n  function setPositionClasses() {\n    router.setPagePosition($oldPage, 'current', false);\n    router.setPagePosition($newPage, 'next', false);\n\n    if (dynamicNavbar) {\n      router.setNavbarPosition($oldNavbarEl, 'current', false);\n      router.setNavbarPosition($newNavbarEl, 'next', false);\n    }\n  }\n\n  if (options.animate && !(isMaster && app.width >= router.params.masterDetailBreakpoint)) {\n    const delay = router.params[`${router.app.theme}PageLoadDelay`];\n    let transition = router.params.transition;\n    if (options.transition) transition = options.transition;\n\n    if (!transition && router.currentRoute && router.currentRoute.route) {\n      transition = router.currentRoute.route.transition;\n    }\n\n    if (!transition && router.currentRoute && router.currentRoute.route.options) {\n      transition = router.currentRoute.route.options.transition;\n    }\n\n    if (transition) {\n      $newPage[0].f7PageTransition = transition;\n    }\n\n    if (delay) {\n      setTimeout(() => {\n        setPositionClasses();\n        router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, 'forward', transition, () => {\n          afterAnimation();\n        });\n      }, delay);\n    } else {\n      setPositionClasses();\n      router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, 'forward', transition, () => {\n        afterAnimation();\n      });\n    }\n  } else {\n    afterAnimation();\n  }\n\n  return router;\n}\n\nfunction load(router, loadParams, loadOptions, ignorePageChange) {\n  if (loadParams === void 0) {\n    loadParams = {};\n  }\n\n  if (loadOptions === void 0) {\n    loadOptions = {};\n  }\n\n  if (!router.allowPageChange && !ignorePageChange) return router;\n  const params = loadParams;\n  const options = loadOptions;\n  const {\n    url,\n    content,\n    el,\n    pageName,\n    component,\n    componentUrl\n  } = params;\n\n  if (!options.reloadCurrent && options.route && options.route.route && options.route.route.parentPath && router.currentRoute.route && router.currentRoute.route.parentPath === options.route.route.parentPath) {\n    // Do something nested\n    if (options.route.url === router.url) {\n      router.allowPageChange = true;\n      return false;\n    } // Check for same params\n\n\n    let sameParams = Object.keys(options.route.params).length === Object.keys(router.currentRoute.params).length;\n\n    if (sameParams) {\n      // Check for equal params name\n      Object.keys(options.route.params).forEach(paramName => {\n        if (!(paramName in router.currentRoute.params) || router.currentRoute.params[paramName] !== options.route.params[paramName]) {\n          sameParams = false;\n        }\n      });\n    }\n\n    if (sameParams) {\n      if (options.route.route.tab) {\n        return router.tabLoad(options.route.route.tab, options);\n      }\n\n      return false;\n    }\n\n    if (!sameParams && options.route.route.tab && router.currentRoute.route.tab && router.currentRoute.parentPath === options.route.parentPath) {\n      return router.tabLoad(options.route.route.tab, options);\n    }\n  }\n\n  if (options.route && options.route.url && router.url === options.route.url && !(options.reloadCurrent || options.reloadPrevious) && !router.params.allowDuplicateUrls) {\n    router.allowPageChange = true;\n    return false;\n  }\n\n  if (!options.route && url) {\n    options.route = router.parseRouteUrl(url);\n    extend(options.route, {\n      route: {\n        url,\n        path: url\n      }\n    });\n  } // Component Callbacks\n\n\n  function resolve(pageEl, newOptions) {\n    return forward(router, pageEl, extend(options, newOptions));\n  }\n\n  function reject() {\n    router.allowPageChange = true;\n    return router;\n  }\n\n  if (url || componentUrl || component) {\n    router.allowPageChange = false;\n  } // Proceed\n\n\n  if (content) {\n    forward(router, router.getPageEl(content), options);\n  } else if (el) {\n    // Load page from specified HTMLElement or by page name in pages container\n    forward(router, router.getPageEl(el), options);\n  } else if (pageName) {\n    // Load page by page name in pages container\n    forward(router, router.$el.children(`.page[data-name=\"${pageName}\"]`).eq(0), options);\n  } else if (component || componentUrl) {\n    // Load from component (F7/Vue/React/...)\n    try {\n      router.pageComponentLoader({\n        routerEl: router.el,\n        component,\n        componentUrl,\n        options,\n        resolve,\n        reject\n      });\n    } catch (err) {\n      router.allowPageChange = true;\n      throw err;\n    }\n  } else if (url) {\n    // Load using XHR\n    if (router.xhrAbortController) {\n      router.xhrAbortController.abort();\n      router.xhrAbortController = false;\n    }\n\n    router.xhrRequest(url, options).then(pageContent => {\n      forward(router, router.getPageEl(pageContent), options);\n    }).catch(() => {\n      router.allowPageChange = true;\n    });\n  }\n\n  return router;\n}\n\nfunction navigate(navigateParams, navigateOptions) {\n  if (navigateOptions === void 0) {\n    navigateOptions = {};\n  }\n\n  const router = this;\n  if (router.swipeBackActive) return router;\n  let url;\n  let createRoute;\n  let name;\n  let path;\n  let query;\n  let params;\n  let route;\n\n  if (typeof navigateParams === 'string') {\n    url = navigateParams;\n  } else {\n    url = navigateParams.url;\n    createRoute = navigateParams.route;\n    name = navigateParams.name;\n    path = navigateParams.path;\n    query = navigateParams.query;\n    params = navigateParams.params;\n  }\n\n  if (name || path) {\n    url = router.generateUrl({\n      path,\n      name,\n      params,\n      query\n    });\n\n    if (url) {\n      return router.navigate(url, navigateOptions);\n    }\n\n    return router;\n  }\n\n  const app = router.app;\n  appRouterCheck(router, 'navigate');\n\n  if (url === '#' || url === '') {\n    return router;\n  }\n\n  let navigateUrl = url.replace('./', '');\n\n  if (navigateUrl[0] !== '/' && navigateUrl.indexOf('#') !== 0) {\n    const currentPath = router.currentRoute.parentPath || router.currentRoute.path;\n    navigateUrl = ((currentPath ? `${currentPath}/` : '/') + navigateUrl).replace('///', '/').replace('//', '/');\n  }\n\n  if (createRoute) {\n    route = extend(router.parseRouteUrl(navigateUrl), {\n      route: extend({}, createRoute)\n    });\n  } else {\n    route = router.findMatchingRoute(navigateUrl);\n  }\n\n  if (!route) {\n    return router;\n  }\n\n  if (route.route && route.route.viewName) {\n    const anotherViewName = route.route.viewName;\n    const anotherView = app.views[anotherViewName];\n\n    if (!anotherView) {\n      throw new Error(`Framework7: There is no View with \"${anotherViewName}\" name that was specified in this route`);\n    }\n\n    if (anotherView !== router.view) {\n      return anotherView.router.navigate(navigateParams, navigateOptions);\n    }\n  }\n\n  if (route.route.redirect) {\n    return redirect.call(router, 'forward', route, navigateOptions);\n  }\n\n  const options = {};\n\n  if (route.route.options) {\n    extend(options, route.route.options, navigateOptions);\n  } else {\n    extend(options, navigateOptions);\n  }\n\n  if (options.openIn && (!router.params.ignoreOpenIn || router.params.ignoreOpenIn && router.history.length > 0)) {\n    return router.openIn(router, navigateUrl, options);\n  }\n\n  options.route = route;\n\n  function resolve() {\n    let routerLoaded = false;\n    'popup popover sheet loginScreen actions customModal panel'.split(' ').forEach(modalLoadProp => {\n      if (route.route[modalLoadProp] && !routerLoaded) {\n        routerLoaded = true;\n        router.modalLoad(modalLoadProp, route, options, 'forward');\n      }\n    });\n\n    if (route.route.keepAlive && route.route.keepAliveData) {\n      load(router, {\n        el: route.route.keepAliveData.pageEl\n      }, options, false);\n      routerLoaded = true;\n    }\n\n    'url content component pageName el componentUrl'.split(' ').forEach(pageLoadProp => {\n      if (route.route[pageLoadProp] && !routerLoaded) {\n        routerLoaded = true;\n        load(router, {\n          [pageLoadProp]: route.route[pageLoadProp]\n        }, options, false);\n      }\n    });\n    if (routerLoaded) return; // Async\n\n    function asyncResolve(resolveParams, resolveOptions) {\n      router.allowPageChange = false;\n      let resolvedAsModal = false;\n      'popup popover sheet loginScreen actions customModal panel'.split(' ').forEach(modalLoadProp => {\n        if (resolveParams[modalLoadProp]) {\n          resolvedAsModal = true;\n          const modalRoute = extend({}, route, {\n            route: resolveParams\n          });\n          router.allowPageChange = true;\n          router.modalLoad(modalLoadProp, modalRoute, extend(options, resolveOptions), 'forward');\n        }\n      });\n      if (resolvedAsModal) return;\n      load(router, resolveParams, extend(options, resolveOptions), true);\n    }\n\n    function asyncReject() {\n      router.allowPageChange = true;\n    }\n\n    if (route.route.async) {\n      router.allowPageChange = false;\n      route.route.async.call(router, {\n        router,\n        to: options.route,\n        from: router.currentRoute,\n        resolve: asyncResolve,\n        reject: asyncReject,\n        direction: 'forward',\n        app\n      });\n    }\n\n    if (route.route.asyncComponent) {\n      asyncComponent(router, route.route.asyncComponent, asyncResolve, asyncReject);\n    }\n  }\n\n  function reject() {\n    router.allowPageChange = true;\n  }\n\n  if (router.params.masterDetailBreakpoint > 0 && route.route.masterRoute) {\n    // load detail route\n    let preloadMaster = true;\n    let masterLoaded = false;\n\n    if (router.currentRoute && router.currentRoute.route) {\n      if ((router.currentRoute.route.master === true || typeof router.currentRoute.route.master === 'function' && router.currentRoute.route.master(app, router)) && (router.currentRoute.route === route.route.masterRoute || router.currentRoute.route.path === route.route.masterRoute.path)) {\n        preloadMaster = false;\n      }\n\n      if (router.currentRoute.route.masterRoute && (router.currentRoute.route.masterRoute === route.route.masterRoute || router.currentRoute.route.masterRoute.path === route.route.masterRoute.path)) {\n        preloadMaster = false;\n        masterLoaded = true;\n      }\n    }\n\n    if (preloadMaster || masterLoaded && navigateOptions.reloadAll) {\n      router.navigate({\n        path: route.route.masterRoute.path,\n        params: route.params || {}\n      }, {\n        animate: false,\n        reloadAll: navigateOptions.reloadAll,\n        reloadCurrent: navigateOptions.reloadCurrent,\n        reloadPrevious: navigateOptions.reloadPrevious,\n        browserHistory: !navigateOptions.initial,\n        history: !navigateOptions.initial,\n        once: {\n          pageAfterIn() {\n            router.navigate(navigateParams, extend({}, navigateOptions, {\n              animate: false,\n              reloadAll: false,\n              reloadCurrent: false,\n              reloadPrevious: false,\n              history: !navigateOptions.initial,\n              browserHistory: !navigateOptions.initial\n            }));\n          }\n\n        }\n      });\n      return router;\n    }\n  }\n\n  processRouteQueue.call(router, route, router.currentRoute, () => {\n    if (route.route.modules) {\n      app.loadModules(Array.isArray(route.route.modules) ? route.route.modules : [route.route.modules]).then(() => {\n        resolve();\n      }).catch(() => {\n        reject();\n      });\n    } else {\n      resolve();\n    }\n  }, () => {\n    reject();\n  }, 'forward'); // Return Router\n\n  return router;\n}\n\nexport { refreshPage, navigate };","map":{"version":3,"names":["getDocument","$","extend","parseUrlQuery","History","redirect","processRouteQueue","appRouterCheck","asyncComponent","refreshPage","router","navigate","currentRoute","url","ignoreCache","reloadCurrent","forward","el","forwardOptions","document","$el","app","view","options","animate","params","browserHistory","replaceState","history","reloadPages","reloadPrevious","reloadAll","clearPreviousHistory","reloadDetail","on","masterDetailEnabled","masterDetailBreakpoint","isMaster","route","master","masterPageEl","otherDetailPageEl","detailsInBetweenRemoved","currentRouteIsModal","modal","modalType","split","forEach","modalLoadProp","modalToClose","modalInstance","get","previousUrl","length","previousRoute","findMatchingRoute","path","query","modalRemove","dynamicNavbar","$viewEl","$newPage","reload","$oldPage","$navbarsEl","$newNavbarEl","$oldNavbarEl","allowPageChange","removeThemeElements","children","f7Page","$navbarEl","keepAlive","keepAliveData","pageEl","$pagesInView","filter","pageInView","$navbarsInView","navbarInView","isDetail","isDetailRoot","i","classList","contains","width","newPagePosition","removeClass","addClass","trigger","position","emit","role","root","detailRoot","map","navbar","getElByPage","eq","navbarEl","removedPageEls","removedNavbarEls","oldNavbarEl","stackPages","push","pageCallback","undefined","removePage","removeNavbar","indexOf","browserHistoryRoot","id","browserHistorySeparator","currentPageEl","currentNavbarEl","slice","saveHistory","newPageInDom","parents","f7Component","mount","componentEl","insertBefore","find","prepend","append","next","f7PageMounted","initialPages","each","index","$oldPageEl","$oldNavbarElEl","hasClass","tab","tabLoad","checkMasterDetailBreakpoint","removeAttr","setPagePosition","setNavbarPosition","afterAnimation","keepOldPage","preloadPreviousPage","theme","attr","clearRouterQueue","setPositionClasses","delay","transition","f7PageTransition","setTimeout","load","loadParams","loadOptions","ignorePageChange","content","pageName","component","componentUrl","parentPath","sameParams","Object","keys","paramName","allowDuplicateUrls","parseRouteUrl","resolve","newOptions","reject","getPageEl","pageComponentLoader","routerEl","err","xhrAbortController","abort","xhrRequest","then","pageContent","catch","navigateParams","navigateOptions","swipeBackActive","createRoute","name","generateUrl","navigateUrl","replace","currentPath","viewName","anotherViewName","anotherView","views","Error","call","openIn","ignoreOpenIn","routerLoaded","modalLoad","pageLoadProp","asyncResolve","resolveParams","resolveOptions","resolvedAsModal","modalRoute","asyncReject","async","to","from","direction","masterRoute","preloadMaster","masterLoaded","initial","once","pageAfterIn","modules","loadModules","Array","isArray"],"sources":["C:/Users/Babak/userlogin/node_modules/framework7/modules/router/navigate.js"],"sourcesContent":["import { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom7.js';\nimport { extend, parseUrlQuery } from '../../shared/utils.js';\nimport History from '../../shared/history.js';\nimport redirect from './redirect.js';\nimport processRouteQueue from './process-route-queue.js';\nimport appRouterCheck from './app-router-check.js';\nimport asyncComponent from './async-component.js';\n\nfunction refreshPage() {\n  const router = this;\n  appRouterCheck(router, 'refreshPage');\n  return router.navigate(router.currentRoute.url, {\n    ignoreCache: true,\n    reloadCurrent: true\n  });\n}\n\nfunction forward(router, el, forwardOptions) {\n  if (forwardOptions === void 0) {\n    forwardOptions = {};\n  }\n\n  const document = getDocument();\n  const $el = $(el);\n  const app = router.app;\n  const view = router.view;\n  const options = extend(false, {\n    animate: router.params.animate,\n    browserHistory: true,\n    replaceState: false,\n    history: true,\n    reloadCurrent: router.params.reloadPages,\n    reloadPrevious: false,\n    reloadAll: false,\n    clearPreviousHistory: false,\n    reloadDetail: router.params.reloadDetail,\n    on: {}\n  }, forwardOptions);\n  const masterDetailEnabled = router.params.masterDetailBreakpoint > 0;\n  const isMaster = masterDetailEnabled && options.route && options.route.route && (options.route.route.master === true || typeof options.route.route.master === 'function' && options.route.route.master(app, router));\n  let masterPageEl;\n  let otherDetailPageEl;\n  let detailsInBetweenRemoved = 0;\n  let currentRouteIsModal = router.currentRoute.modal;\n  let modalType;\n\n  if (!currentRouteIsModal) {\n    'popup popover sheet loginScreen actions customModal panel'.split(' ').forEach(modalLoadProp => {\n      if (router.currentRoute && router.currentRoute.route && router.currentRoute.route[modalLoadProp]) {\n        currentRouteIsModal = true;\n        modalType = modalLoadProp;\n      }\n    });\n  }\n\n  if (currentRouteIsModal) {\n    const modalToClose = router.currentRoute.modal || router.currentRoute.route.modalInstance || app[modalType].get();\n    const previousUrl = router.history[router.history.length - 2];\n    let previousRoute = router.findMatchingRoute(previousUrl);\n\n    if (!previousRoute && previousUrl) {\n      previousRoute = {\n        url: previousUrl,\n        path: previousUrl.split('?')[0],\n        query: parseUrlQuery(previousUrl),\n        route: {\n          path: previousUrl.split('?')[0],\n          url: previousUrl\n        }\n      };\n    }\n\n    router.modalRemove(modalToClose);\n  }\n\n  const dynamicNavbar = router.dynamicNavbar;\n  const $viewEl = router.$el;\n  const $newPage = $el;\n  const reload = options.reloadPrevious || options.reloadCurrent || options.reloadAll;\n  let $oldPage;\n  let $navbarsEl;\n  let $newNavbarEl;\n  let $oldNavbarEl;\n  router.allowPageChange = false;\n\n  if ($newPage.length === 0) {\n    router.allowPageChange = true;\n    return router;\n  }\n\n  if ($newPage.length) {\n    // Remove theme elements\n    router.removeThemeElements($newPage);\n  }\n\n  if (dynamicNavbar) {\n    $newNavbarEl = $newPage.children('.navbar');\n    $navbarsEl = router.$navbarsEl;\n\n    if ($newNavbarEl.length === 0 && $newPage[0] && $newPage[0].f7Page) {\n      // Try from pageData\n      $newNavbarEl = $newPage[0].f7Page.$navbarEl;\n    }\n  } // Save Keep Alive Cache\n\n\n  if (options.route && options.route.route && options.route.route.keepAlive && !options.route.route.keepAliveData) {\n    options.route.route.keepAliveData = {\n      pageEl: $el[0]\n    };\n  } // Pages In View\n\n\n  const $pagesInView = $viewEl.children('.page:not(.stacked)').filter(pageInView => pageInView !== $newPage[0]); // Navbars In View\n\n  let $navbarsInView;\n\n  if (dynamicNavbar) {\n    $navbarsInView = $navbarsEl.children('.navbar:not(.stacked)').filter(navbarInView => navbarInView !== $newNavbarEl[0]);\n  } // Exit when reload previous and only 1 page in view so nothing ro reload\n\n\n  if (options.reloadPrevious && $pagesInView.length < 2) {\n    router.allowPageChange = true;\n    return router;\n  } // Find Detail' master page\n\n\n  let isDetail;\n  let reloadDetail;\n  let isDetailRoot;\n\n  if (masterDetailEnabled && !options.reloadAll) {\n    for (let i = 0; i < $pagesInView.length; i += 1) {\n      if (!masterPageEl && $pagesInView[i].classList.contains('page-master')) {\n        masterPageEl = $pagesInView[i];\n        continue; // eslint-disable-line\n      }\n    }\n\n    isDetail = !isMaster && masterPageEl;\n\n    if (isDetail) {\n      // Find Other Detail\n      if (masterPageEl) {\n        for (let i = 0; i < $pagesInView.length; i += 1) {\n          if ($pagesInView[i].classList.contains('page-master-detail')) {\n            otherDetailPageEl = $pagesInView[i];\n            continue; // eslint-disable-line\n          }\n        }\n      }\n    }\n\n    reloadDetail = isDetail && options.reloadDetail && app.width >= router.params.masterDetailBreakpoint && masterPageEl;\n  }\n\n  if (isDetail) {\n    isDetailRoot = !otherDetailPageEl || reloadDetail || options.reloadAll || options.reloadCurrent;\n  } // New Page\n\n\n  let newPagePosition = 'next';\n\n  if (options.reloadCurrent || options.reloadAll || reloadDetail) {\n    newPagePosition = 'current';\n  } else if (options.reloadPrevious) {\n    newPagePosition = 'previous';\n  }\n\n  $newPage.removeClass('page-previous page-current page-next').addClass(`page-${newPagePosition}${isMaster ? ' page-master' : ''}${isDetail ? ' page-master-detail' : ''}${isDetailRoot ? ' page-master-detail-root' : ''}`).removeClass('stacked').trigger('page:unstack').trigger('page:position', {\n    position: newPagePosition\n  });\n  router.emit('pageUnstack', $newPage[0]);\n  router.emit('pagePosition', $newPage[0], newPagePosition);\n\n  if (isMaster || isDetail) {\n    $newPage.trigger('page:role', {\n      role: isMaster ? 'master' : 'detail',\n      root: !!isDetailRoot\n    });\n    router.emit('pageRole', $newPage[0], {\n      role: isMaster ? 'master' : 'detail',\n      detailRoot: !!isDetailRoot\n    });\n  }\n\n  if (dynamicNavbar && $newNavbarEl.length) {\n    $newNavbarEl.removeClass('navbar-previous navbar-current navbar-next').addClass(`navbar-${newPagePosition}${isMaster ? ' navbar-master' : ''}${isDetail ? ' navbar-master-detail' : ''}${isDetailRoot ? ' navbar-master-detail-root' : ''}`).removeClass('stacked');\n    $newNavbarEl.trigger('navbar:position', {\n      position: newPagePosition\n    });\n    router.emit('navbarPosition', $newNavbarEl[0], newPagePosition);\n\n    if (isMaster || isDetail) {\n      router.emit('navbarRole', $newNavbarEl[0], {\n        role: isMaster ? 'master' : 'detail',\n        detailRoot: !!isDetailRoot\n      });\n    }\n  } // Find Old Page\n\n\n  if (options.reloadCurrent || reloadDetail) {\n    if (reloadDetail) {\n      $oldPage = $pagesInView.filter(pageEl => !pageEl.classList.contains('page-master'));\n\n      if (dynamicNavbar) {\n        $oldNavbarEl = $($oldPage.map(pageEl => app.navbar.getElByPage(pageEl)));\n      }\n\n      if ($oldPage.length > 1 && masterPageEl) {\n        detailsInBetweenRemoved = $oldPage.length - 1;\n        $(masterPageEl).removeClass('page-master-stacked').trigger('page:masterunstack');\n        router.emit('pageMasterUnstack', masterPageEl);\n\n        if (dynamicNavbar) {\n          $(app.navbar.getElByPage(masterPageEl)).removeClass('navbar-master-stacked');\n          router.emit('navbarMasterUnstack', app.navbar.getElByPage(masterPageEl));\n        }\n      }\n    } else {\n      $oldPage = $pagesInView.eq($pagesInView.length - 1);\n\n      if (dynamicNavbar) {\n        $oldNavbarEl = $(app.navbar.getElByPage($oldPage));\n      }\n    }\n  } else if (options.reloadPrevious) {\n    $oldPage = $pagesInView.eq($pagesInView.length - 2);\n\n    if (dynamicNavbar) {\n      // $oldNavbarEl = $navbarsInView.eq($pagesInView.length - 2);\n      $oldNavbarEl = $(app.navbar.getElByPage($oldPage));\n    }\n  } else if (options.reloadAll) {\n    $oldPage = $pagesInView.filter(pageEl => pageEl !== $newPage[0]);\n\n    if (dynamicNavbar) {\n      $oldNavbarEl = $navbarsInView.filter(navbarEl => navbarEl !== $newNavbarEl[0]);\n    }\n  } else {\n    let removedPageEls = [];\n    let removedNavbarEls = [];\n\n    if ($pagesInView.length > 1) {\n      let i = 0;\n\n      for (i = 0; i < $pagesInView.length - 1; i += 1) {\n        if (masterPageEl && $pagesInView[i] === masterPageEl) {\n          $pagesInView.eq(i).addClass('page-master-stacked');\n          $pagesInView.eq(i).trigger('page:masterstack');\n          router.emit('pageMasterStack', $pagesInView[i]);\n\n          if (dynamicNavbar) {\n            $(app.navbar.getElByPage(masterPageEl)).addClass('navbar-master-stacked');\n            router.emit('navbarMasterStack', app.navbar.getElByPage(masterPageEl));\n          }\n\n          continue; // eslint-disable-line\n        }\n\n        const oldNavbarEl = app.navbar.getElByPage($pagesInView.eq(i));\n\n        if (router.params.stackPages) {\n          $pagesInView.eq(i).addClass('stacked');\n          $pagesInView.eq(i).trigger('page:stack');\n          router.emit('pageStack', $pagesInView[i]);\n\n          if (dynamicNavbar) {\n            $(oldNavbarEl).addClass('stacked');\n          }\n        } else {\n          // Page remove event\n          removedPageEls.push($pagesInView[i]);\n          router.pageCallback('beforeRemove', $pagesInView[i], $navbarsInView && $navbarsInView[i], 'previous', undefined, options);\n          router.removePage($pagesInView[i]);\n\n          if (dynamicNavbar && oldNavbarEl) {\n            removedNavbarEls.push(oldNavbarEl);\n            router.removeNavbar(oldNavbarEl);\n          }\n        }\n      }\n    }\n\n    $oldPage = $viewEl.children('.page:not(.stacked)').filter(pageEl => pageEl !== $newPage[0] && removedPageEls.indexOf(pageEl) < 0);\n\n    if (dynamicNavbar) {\n      $oldNavbarEl = $navbarsEl.children('.navbar:not(.stacked)').filter(navbarEl => navbarEl !== $newNavbarEl[0] && removedNavbarEls.indexOf(removedNavbarEls) < 0);\n    }\n\n    removedPageEls = [];\n    removedNavbarEls = [];\n  }\n\n  if (isDetail && !options.reloadAll) {\n    if ($oldPage.length > 1 || reloadDetail) {\n      $oldPage = $oldPage.filter(pageEl => !pageEl.classList.contains('page-master'));\n    }\n\n    if ($oldNavbarEl && ($oldNavbarEl.length > 1 || reloadDetail)) {\n      $oldNavbarEl = $oldNavbarEl.filter(navbarEl => !navbarEl.classList.contains('navbar-master'));\n    }\n  } // Push State\n\n\n  if (router.params.browserHistory && (options.browserHistory || options.replaceState) && !options.reloadPrevious) {\n    const browserHistoryRoot = router.params.browserHistoryRoot || '';\n    History[options.reloadCurrent || reloadDetail && otherDetailPageEl || options.reloadAll || options.replaceState ? 'replace' : 'push'](view.id, {\n      url: options.route.url\n    }, browserHistoryRoot + router.params.browserHistorySeparator + options.route.url);\n  }\n\n  if (!options.reloadPrevious) {\n    // Current Page & Navbar\n    router.currentPageEl = $newPage[0];\n\n    if (dynamicNavbar && $newNavbarEl.length) {\n      router.currentNavbarEl = $newNavbarEl[0];\n    } else {\n      delete router.currentNavbarEl;\n    } // Current Route\n\n\n    router.currentRoute = options.route;\n  } // Update router history\n\n\n  const url = options.route.url;\n\n  if (options.history) {\n    if (((options.reloadCurrent || reloadDetail && otherDetailPageEl) && router.history.length) > 0 || options.replaceState) {\n      if (reloadDetail && detailsInBetweenRemoved > 0) {\n        router.history = router.history.slice(0, router.history.length - detailsInBetweenRemoved);\n      }\n\n      router.history[router.history.length - (options.reloadPrevious ? 2 : 1)] = url;\n    } else if (options.reloadPrevious) {\n      router.history[router.history.length - 2] = url;\n    } else if (options.reloadAll) {\n      router.history = [url];\n    } else {\n      router.history.push(url);\n    }\n  }\n\n  router.saveHistory(); // Insert new page and navbar\n\n  const newPageInDom = $newPage.parents(document).length > 0;\n  const f7Component = $newPage[0].f7Component;\n\n  if (options.reloadPrevious) {\n    if (f7Component && !newPageInDom) {\n      f7Component.mount(componentEl => {\n        $(componentEl).insertBefore($oldPage);\n      });\n    } else {\n      $newPage.insertBefore($oldPage);\n    }\n\n    if (dynamicNavbar && $newNavbarEl.length) {\n      if ($newNavbarEl.find('.title-large').length) {\n        $newNavbarEl.addClass('navbar-large');\n      }\n\n      if ($oldNavbarEl.length) {\n        $newNavbarEl.insertBefore($oldNavbarEl);\n      } else {\n        if (!router.$navbarsEl.parents(document).length) {\n          router.$el.prepend(router.$navbarsEl);\n        }\n\n        $navbarsEl.append($newNavbarEl);\n      }\n    }\n  } else {\n    if ($oldPage.next('.page')[0] !== $newPage[0]) {\n      if (f7Component && !newPageInDom) {\n        f7Component.mount(componentEl => {\n          $viewEl.append(componentEl);\n        });\n      } else {\n        $viewEl.append($newPage[0]);\n      }\n    }\n\n    if (dynamicNavbar && $newNavbarEl.length) {\n      if ($newNavbarEl.find('.title-large').length) {\n        $newNavbarEl.addClass('navbar-large');\n      }\n\n      if (!router.$navbarsEl.parents(document).length) {\n        router.$el.prepend(router.$navbarsEl);\n      }\n\n      $navbarsEl.append($newNavbarEl[0]);\n    }\n  }\n\n  if (!newPageInDom) {\n    router.pageCallback('mounted', $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : 'current', options, $oldPage);\n  } else if (options.route && options.route.route && options.route.route.keepAlive && !$newPage[0].f7PageMounted) {\n    $newPage[0].f7PageMounted = true;\n    router.pageCallback('mounted', $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : 'current', options, $oldPage);\n  } // Remove old page\n\n\n  if ((options.reloadCurrent || reloadDetail) && $oldPage.length > 0) {\n    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {\n      $oldPage.addClass('stacked');\n      $oldPage.trigger('page:stack');\n      router.emit('pageStack', $oldPage[0]);\n\n      if (dynamicNavbar) {\n        $oldNavbarEl.addClass('stacked');\n      }\n    } else {\n      // Page remove event\n      router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', undefined, options);\n      router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', undefined, options);\n      router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'current', undefined, options);\n      router.removePage($oldPage);\n\n      if (dynamicNavbar && $oldNavbarEl && $oldNavbarEl.length) {\n        router.removeNavbar($oldNavbarEl);\n      }\n    }\n  } else if (options.reloadAll) {\n    $oldPage.each((pageEl, index) => {\n      const $oldPageEl = $(pageEl);\n      const $oldNavbarElEl = $(app.navbar.getElByPage($oldPageEl));\n\n      if (router.params.stackPages && router.initialPages.indexOf($oldPageEl[0]) >= 0) {\n        $oldPageEl.addClass('stacked');\n        $oldPageEl.trigger('page:stack');\n        router.emit('pageStack', $oldPageEl[0]);\n\n        if (dynamicNavbar) {\n          $oldNavbarElEl.addClass('stacked');\n        }\n      } else {\n        // Page remove event\n        if ($oldPageEl.hasClass('page-current')) {\n          router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', undefined, options);\n          router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', undefined, options);\n        }\n\n        router.pageCallback('beforeRemove', $oldPageEl, $oldNavbarEl && $oldNavbarEl.eq(index), 'previous', undefined, options);\n        router.removePage($oldPageEl);\n\n        if (dynamicNavbar && $oldNavbarElEl.length) {\n          router.removeNavbar($oldNavbarElEl);\n        }\n      }\n    });\n  } else if (options.reloadPrevious) {\n    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {\n      $oldPage.addClass('stacked');\n      $oldPage.trigger('page:stack');\n      router.emit('pageStack', $oldPage[0]);\n\n      if (dynamicNavbar) {\n        $oldNavbarEl.addClass('stacked');\n      }\n    } else {\n      // Page remove event\n      router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'previous', undefined, options);\n      router.removePage($oldPage);\n\n      if (dynamicNavbar && $oldNavbarEl && $oldNavbarEl.length) {\n        router.removeNavbar($oldNavbarEl);\n      }\n    }\n  } // Load Tab\n\n\n  if (options.route.route.tab) {\n    router.tabLoad(options.route.route.tab, extend({}, options, {\n      history: false,\n      browserHistory: false\n    }));\n  } // Check master detail\n\n\n  if (masterDetailEnabled) {\n    view.checkMasterDetailBreakpoint();\n  } // Page init and before init events\n\n\n  router.pageCallback('init', $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : 'current', options, $oldPage);\n\n  if (options.reloadCurrent || options.reloadAll || reloadDetail) {\n    router.allowPageChange = true;\n    router.pageCallback('beforeIn', $newPage, $newNavbarEl, newPagePosition, 'current', options);\n    $newPage.removeAttr('aria-hidden');\n\n    if (dynamicNavbar && $newNavbarEl) {\n      $newNavbarEl.removeAttr('aria-hidden');\n    }\n\n    router.pageCallback('afterIn', $newPage, $newNavbarEl, newPagePosition, 'current', options);\n    if (options.reloadCurrent && options.clearPreviousHistory) router.clearPreviousHistory();\n\n    if (reloadDetail) {\n      router.setPagePosition($(masterPageEl), 'previous');\n\n      if (masterPageEl.f7Page && masterPageEl.f7Page.navbarEl) {\n        router.setNavbarPosition($(masterPageEl.f7Page.navbarEl), 'previous');\n      }\n    }\n\n    return router;\n  }\n\n  if (options.reloadPrevious) {\n    router.allowPageChange = true;\n    return router;\n  } // Before animation event\n\n\n  router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', 'previous', options);\n  router.pageCallback('beforeIn', $newPage, $newNavbarEl, 'next', 'current', options); // Animation\n\n  function afterAnimation() {\n    router.setPagePosition($newPage, 'current', false);\n    router.setPagePosition($oldPage, 'previous', !$oldPage.hasClass('page-master'));\n\n    if (dynamicNavbar) {\n      router.setNavbarPosition($newNavbarEl, 'current', false);\n      router.setNavbarPosition($oldNavbarEl, 'previous', !$oldNavbarEl.hasClass('navbar-master'));\n    } // After animation event\n\n\n    router.allowPageChange = true;\n    router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', 'previous', options);\n    router.pageCallback('afterIn', $newPage, $newNavbarEl, 'next', 'current', options);\n    let keepOldPage = (router.params.preloadPreviousPage || router.params[`${app.theme}SwipeBack`]) && !isMaster;\n\n    if (!keepOldPage) {\n      if ($newPage.hasClass('smart-select-page') || $newPage.hasClass('photo-browser-page') || $newPage.hasClass('autocomplete-page') || $newPage.hasClass('color-picker-page')) {\n        keepOldPage = true;\n      }\n    }\n\n    if (!keepOldPage) {\n      if (router.params.stackPages) {\n        $oldPage.addClass('stacked');\n        $oldPage.trigger('page:stack');\n        router.emit('pageStack', $oldPage[0]);\n\n        if (dynamicNavbar) {\n          $oldNavbarEl.addClass('stacked');\n        }\n      } else if (!($newPage.attr('data-name') && $newPage.attr('data-name') === 'smart-select-page')) {\n        // Remove event\n        router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'previous', undefined, options);\n        router.removePage($oldPage);\n\n        if (dynamicNavbar && $oldNavbarEl.length) {\n          router.removeNavbar($oldNavbarEl);\n        }\n      }\n    }\n\n    if (options.clearPreviousHistory) router.clearPreviousHistory();\n    router.emit('routeChanged', router.currentRoute, router.previousRoute, router);\n\n    if (router.params.browserHistory) {\n      History.clearRouterQueue();\n    }\n  }\n\n  function setPositionClasses() {\n    router.setPagePosition($oldPage, 'current', false);\n    router.setPagePosition($newPage, 'next', false);\n\n    if (dynamicNavbar) {\n      router.setNavbarPosition($oldNavbarEl, 'current', false);\n      router.setNavbarPosition($newNavbarEl, 'next', false);\n    }\n  }\n\n  if (options.animate && !(isMaster && app.width >= router.params.masterDetailBreakpoint)) {\n    const delay = router.params[`${router.app.theme}PageLoadDelay`];\n    let transition = router.params.transition;\n    if (options.transition) transition = options.transition;\n\n    if (!transition && router.currentRoute && router.currentRoute.route) {\n      transition = router.currentRoute.route.transition;\n    }\n\n    if (!transition && router.currentRoute && router.currentRoute.route.options) {\n      transition = router.currentRoute.route.options.transition;\n    }\n\n    if (transition) {\n      $newPage[0].f7PageTransition = transition;\n    }\n\n    if (delay) {\n      setTimeout(() => {\n        setPositionClasses();\n        router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, 'forward', transition, () => {\n          afterAnimation();\n        });\n      }, delay);\n    } else {\n      setPositionClasses();\n      router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, 'forward', transition, () => {\n        afterAnimation();\n      });\n    }\n  } else {\n    afterAnimation();\n  }\n\n  return router;\n}\n\nfunction load(router, loadParams, loadOptions, ignorePageChange) {\n  if (loadParams === void 0) {\n    loadParams = {};\n  }\n\n  if (loadOptions === void 0) {\n    loadOptions = {};\n  }\n\n  if (!router.allowPageChange && !ignorePageChange) return router;\n  const params = loadParams;\n  const options = loadOptions;\n  const {\n    url,\n    content,\n    el,\n    pageName,\n    component,\n    componentUrl\n  } = params;\n\n  if (!options.reloadCurrent && options.route && options.route.route && options.route.route.parentPath && router.currentRoute.route && router.currentRoute.route.parentPath === options.route.route.parentPath) {\n    // Do something nested\n    if (options.route.url === router.url) {\n      router.allowPageChange = true;\n      return false;\n    } // Check for same params\n\n\n    let sameParams = Object.keys(options.route.params).length === Object.keys(router.currentRoute.params).length;\n\n    if (sameParams) {\n      // Check for equal params name\n      Object.keys(options.route.params).forEach(paramName => {\n        if (!(paramName in router.currentRoute.params) || router.currentRoute.params[paramName] !== options.route.params[paramName]) {\n          sameParams = false;\n        }\n      });\n    }\n\n    if (sameParams) {\n      if (options.route.route.tab) {\n        return router.tabLoad(options.route.route.tab, options);\n      }\n\n      return false;\n    }\n\n    if (!sameParams && options.route.route.tab && router.currentRoute.route.tab && router.currentRoute.parentPath === options.route.parentPath) {\n      return router.tabLoad(options.route.route.tab, options);\n    }\n  }\n\n  if (options.route && options.route.url && router.url === options.route.url && !(options.reloadCurrent || options.reloadPrevious) && !router.params.allowDuplicateUrls) {\n    router.allowPageChange = true;\n    return false;\n  }\n\n  if (!options.route && url) {\n    options.route = router.parseRouteUrl(url);\n    extend(options.route, {\n      route: {\n        url,\n        path: url\n      }\n    });\n  } // Component Callbacks\n\n\n  function resolve(pageEl, newOptions) {\n    return forward(router, pageEl, extend(options, newOptions));\n  }\n\n  function reject() {\n    router.allowPageChange = true;\n    return router;\n  }\n\n  if (url || componentUrl || component) {\n    router.allowPageChange = false;\n  } // Proceed\n\n\n  if (content) {\n    forward(router, router.getPageEl(content), options);\n  } else if (el) {\n    // Load page from specified HTMLElement or by page name in pages container\n    forward(router, router.getPageEl(el), options);\n  } else if (pageName) {\n    // Load page by page name in pages container\n    forward(router, router.$el.children(`.page[data-name=\"${pageName}\"]`).eq(0), options);\n  } else if (component || componentUrl) {\n    // Load from component (F7/Vue/React/...)\n    try {\n      router.pageComponentLoader({\n        routerEl: router.el,\n        component,\n        componentUrl,\n        options,\n        resolve,\n        reject\n      });\n    } catch (err) {\n      router.allowPageChange = true;\n      throw err;\n    }\n  } else if (url) {\n    // Load using XHR\n    if (router.xhrAbortController) {\n      router.xhrAbortController.abort();\n      router.xhrAbortController = false;\n    }\n\n    router.xhrRequest(url, options).then(pageContent => {\n      forward(router, router.getPageEl(pageContent), options);\n    }).catch(() => {\n      router.allowPageChange = true;\n    });\n  }\n\n  return router;\n}\n\nfunction navigate(navigateParams, navigateOptions) {\n  if (navigateOptions === void 0) {\n    navigateOptions = {};\n  }\n\n  const router = this;\n  if (router.swipeBackActive) return router;\n  let url;\n  let createRoute;\n  let name;\n  let path;\n  let query;\n  let params;\n  let route;\n\n  if (typeof navigateParams === 'string') {\n    url = navigateParams;\n  } else {\n    url = navigateParams.url;\n    createRoute = navigateParams.route;\n    name = navigateParams.name;\n    path = navigateParams.path;\n    query = navigateParams.query;\n    params = navigateParams.params;\n  }\n\n  if (name || path) {\n    url = router.generateUrl({\n      path,\n      name,\n      params,\n      query\n    });\n\n    if (url) {\n      return router.navigate(url, navigateOptions);\n    }\n\n    return router;\n  }\n\n  const app = router.app;\n  appRouterCheck(router, 'navigate');\n\n  if (url === '#' || url === '') {\n    return router;\n  }\n\n  let navigateUrl = url.replace('./', '');\n\n  if (navigateUrl[0] !== '/' && navigateUrl.indexOf('#') !== 0) {\n    const currentPath = router.currentRoute.parentPath || router.currentRoute.path;\n    navigateUrl = ((currentPath ? `${currentPath}/` : '/') + navigateUrl).replace('///', '/').replace('//', '/');\n  }\n\n  if (createRoute) {\n    route = extend(router.parseRouteUrl(navigateUrl), {\n      route: extend({}, createRoute)\n    });\n  } else {\n    route = router.findMatchingRoute(navigateUrl);\n  }\n\n  if (!route) {\n    return router;\n  }\n\n  if (route.route && route.route.viewName) {\n    const anotherViewName = route.route.viewName;\n    const anotherView = app.views[anotherViewName];\n\n    if (!anotherView) {\n      throw new Error(`Framework7: There is no View with \"${anotherViewName}\" name that was specified in this route`);\n    }\n\n    if (anotherView !== router.view) {\n      return anotherView.router.navigate(navigateParams, navigateOptions);\n    }\n  }\n\n  if (route.route.redirect) {\n    return redirect.call(router, 'forward', route, navigateOptions);\n  }\n\n  const options = {};\n\n  if (route.route.options) {\n    extend(options, route.route.options, navigateOptions);\n  } else {\n    extend(options, navigateOptions);\n  }\n\n  if (options.openIn && (!router.params.ignoreOpenIn || router.params.ignoreOpenIn && router.history.length > 0)) {\n    return router.openIn(router, navigateUrl, options);\n  }\n\n  options.route = route;\n\n  function resolve() {\n    let routerLoaded = false;\n    'popup popover sheet loginScreen actions customModal panel'.split(' ').forEach(modalLoadProp => {\n      if (route.route[modalLoadProp] && !routerLoaded) {\n        routerLoaded = true;\n        router.modalLoad(modalLoadProp, route, options, 'forward');\n      }\n    });\n\n    if (route.route.keepAlive && route.route.keepAliveData) {\n      load(router, {\n        el: route.route.keepAliveData.pageEl\n      }, options, false);\n      routerLoaded = true;\n    }\n\n    'url content component pageName el componentUrl'.split(' ').forEach(pageLoadProp => {\n      if (route.route[pageLoadProp] && !routerLoaded) {\n        routerLoaded = true;\n        load(router, {\n          [pageLoadProp]: route.route[pageLoadProp]\n        }, options, false);\n      }\n    });\n    if (routerLoaded) return; // Async\n\n    function asyncResolve(resolveParams, resolveOptions) {\n      router.allowPageChange = false;\n      let resolvedAsModal = false;\n      'popup popover sheet loginScreen actions customModal panel'.split(' ').forEach(modalLoadProp => {\n        if (resolveParams[modalLoadProp]) {\n          resolvedAsModal = true;\n          const modalRoute = extend({}, route, {\n            route: resolveParams\n          });\n          router.allowPageChange = true;\n          router.modalLoad(modalLoadProp, modalRoute, extend(options, resolveOptions), 'forward');\n        }\n      });\n      if (resolvedAsModal) return;\n      load(router, resolveParams, extend(options, resolveOptions), true);\n    }\n\n    function asyncReject() {\n      router.allowPageChange = true;\n    }\n\n    if (route.route.async) {\n      router.allowPageChange = false;\n      route.route.async.call(router, {\n        router,\n        to: options.route,\n        from: router.currentRoute,\n        resolve: asyncResolve,\n        reject: asyncReject,\n        direction: 'forward',\n        app\n      });\n    }\n\n    if (route.route.asyncComponent) {\n      asyncComponent(router, route.route.asyncComponent, asyncResolve, asyncReject);\n    }\n  }\n\n  function reject() {\n    router.allowPageChange = true;\n  }\n\n  if (router.params.masterDetailBreakpoint > 0 && route.route.masterRoute) {\n    // load detail route\n    let preloadMaster = true;\n    let masterLoaded = false;\n\n    if (router.currentRoute && router.currentRoute.route) {\n      if ((router.currentRoute.route.master === true || typeof router.currentRoute.route.master === 'function' && router.currentRoute.route.master(app, router)) && (router.currentRoute.route === route.route.masterRoute || router.currentRoute.route.path === route.route.masterRoute.path)) {\n        preloadMaster = false;\n      }\n\n      if (router.currentRoute.route.masterRoute && (router.currentRoute.route.masterRoute === route.route.masterRoute || router.currentRoute.route.masterRoute.path === route.route.masterRoute.path)) {\n        preloadMaster = false;\n        masterLoaded = true;\n      }\n    }\n\n    if (preloadMaster || masterLoaded && navigateOptions.reloadAll) {\n      router.navigate({\n        path: route.route.masterRoute.path,\n        params: route.params || {}\n      }, {\n        animate: false,\n        reloadAll: navigateOptions.reloadAll,\n        reloadCurrent: navigateOptions.reloadCurrent,\n        reloadPrevious: navigateOptions.reloadPrevious,\n        browserHistory: !navigateOptions.initial,\n        history: !navigateOptions.initial,\n        once: {\n          pageAfterIn() {\n            router.navigate(navigateParams, extend({}, navigateOptions, {\n              animate: false,\n              reloadAll: false,\n              reloadCurrent: false,\n              reloadPrevious: false,\n              history: !navigateOptions.initial,\n              browserHistory: !navigateOptions.initial\n            }));\n          }\n\n        }\n      });\n      return router;\n    }\n  }\n\n  processRouteQueue.call(router, route, router.currentRoute, () => {\n    if (route.route.modules) {\n      app.loadModules(Array.isArray(route.route.modules) ? route.route.modules : [route.route.modules]).then(() => {\n        resolve();\n      }).catch(() => {\n        reject();\n      });\n    } else {\n      resolve();\n    }\n  }, () => {\n    reject();\n  }, 'forward'); // Return Router\n\n  return router;\n}\n\nexport { refreshPage, navigate };"],"mappings":"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"},"metadata":{},"sourceType":"module"}